[

{
  "permalink": "http://localhost:1313/tags/2024/",
  "title": "2024",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/categories/",
  "title": "Categories",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/",
  "title": "DevHvun",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/tags/indiv/",
  "title": "Indiv",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/categories/indiv/",
  "title": "Indiv",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/series/memoirs/",
  "title": "Memoirs",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/",
  "title": "Posts",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2024-08-18-creating-oracle-instances-and-server/",
  "title": "오라클 인스턴스 생성 및 서버 만들기",
  "tags": ["2024", "indiv"],
  "description": "오라클 인스턴스 생성 및 서버 만들기",
  "contents": "\n"
},
{
  "permalink": "http://localhost:1313/tags/start/",
  "title": "Start",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/categories/work/",
  "title": "Work",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/series/worklog/",
  "title": "Worklog",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2024-07-31-experience-the-egovframework/",
  "title": "전자정부 프레임워크? 이것 뭐에요~?",
  "tags": ["2024", "start"],
  "description": "JSP Spring을 사용한 프로젝트 참여 경험 기록",
  "contents": "이번 달부터 새로운 프로젝트에 참여하게 되었다. 프로젝트는 규모가 제법 크고, 팀원들도 많아서 내 역할이 아주 크지는 않지만, 처음부터 끝까지 모든 과정에 관여할 수 있는 기회를 얻게 되어 매우 기대되고 설레는 마음으로 참여하는 중이다. ( Spring 프로젝트를 너무나도 경험해 보고 싶었다.. )\n특히 이번 프로젝트는 전자정부 프레임워크를 사용하고 있어서, 플러그인이나 외부 라이브러리 없이 순수 코딩으로 문제를 해결해야 했다. 이 과정에서 내가 얼마나 플러그인이나 라이브러리에 의존해 왔는지를 깨닫게 되었고, 반성하게 되었다. 처음에는 상당히 도전적으로 느껴져서 다소 불안하기도 했지만, 스스로의 개발 실력을 단련할 좋은 기회라는 생각이 들었다. ( 뭔가 근본 넘치게 개발하는 느낌이랄까..?? )\n아무것도 모르는데,, 문제가 될까요? 데이터 수집과 DB 저장 과정에서 예상보다 많은 어려움을 겪었다. 데이터 수집이 예상했던 것보다 원활하지 않았고, 수집된 데이터를 적재하는 과정도 쉽지 않았다. 구체적으로는 데이터를 Vertica 테이블에 먼저 넣고, 이를 ETL(Extract, Transform, Load) 과정에서 변환한 후, 다시 Tibero 데이터베이스에 적재하는 작업이 포함되었는데, 이 과정에서 처음 접하는 ETL 도구에 익숙해지기까지 시간이 걸렸고, 예상치 못한 문제들도 발생했다.\n이미 실제로 운영 중인 프로젝트에 새로운 기능을 추가해야 했기 때문에, 기존 코드 베이스를 이해하는 것도 쉽지 않았다. 처음에는 코드가 어떻게 구성되고 작동하는지를 파악하는 데 시간이 많이 걸렸는데, 특히, 단순히 기능을 구현하는 것이 아니라 기존 코드와의 통합성을 고려해야 했기 때문에, 이해 없이 건너뛰려는 시도를 하다 보니 여러 차례 막히는 부분이 있었다. 이 경험을 통해, 전체적인 구조를 이해하는 것이 얼마나 중요한지를 다시 한번 깨달았다.\n경험치 2배 이벤트 지금 나는 프론트엔드와 백엔드 양쪽 모두에서 작업을 했기 때문에 정신없었지만, 다양한 기술을 익힐 수 있는 좋은 경험을 하고 있는 중이다.\n프론트엔드 작업을 하면서 HTML, CSS, JavaScript를 사용하여 다양한 레이아웃을 수정하고 UI를 개선하는 작업을 하고 있다. 이를 통해 사용자 경험을 고려하여 UI를 설계하고 테스트하면서, 사용자 중심의 디자인이 얼마나 중요한지를 깨달았다.\n백엔드에서는 SQL 쿼리를 수정하고 생성하는 작업을 통해, 데이터베이스 관리와 최적화에 대한 깊이 있는 경험을 쌓고 있다. 단순히 쿼리를 작성하는 것을 넘어, 효율적인 쿼리 작성법과 성능 최적화에 대한 중요성을 깨달았다. 또한, 프로젝트의 Spring 구조와 각 모듈 간의 역할 분담을 이해하면서, Spring 프로젝트에서의 각 기능별 역할, 구성, 코드 관리와 모듈화의 중요성을 체감했다.\n프로젝트 관리와 형상 관리를 위해 GitLab을 사용하면서 팀원들과의 코드 분업이 원활하게 이루어졌으며, 형상 관리와 코드 통합에 대한 경험을 쌓을 수 있었다. 브랜치를 분리해서 각자 작업하고 머지 하는 과정을 통해 코드 리뷰도 진행하고, 코드 품질을 유지하며 안정적인 배포를 할 수 있었다. 이 과정에서 Git을 활용한 협업의 중요성과 효율성을 몸소 체험할 수 있었다.\n이전에는 주로 작은 프로젝트들을 경험했었는데, 이번에는 조금 큰 규모의 프로젝트에 참여하게 되면서 팀원 간의 협업과 의사소통의 중요성을 새삼 느끼고 있다. 이번 프로젝트를 통해 아직 많이 부족한 점과 내 수준이 드러나 부끄럽기도 하지만, 좋은 선임 개발자분들과 함께 작업하며 많은 것을 배우고 성장하고 싶다.\n"
},
{
  "permalink": "http://localhost:1313/tags/impl/",
  "title": "Impl",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2024-06-24-implement-authorization-management-functions/",
  "title": "좌충우돌 권한관리 기능 구현하기",
  "tags": ["2024", "impl"],
  "description": "좌충우돌 권한관리 기능 구현하기",
  "contents": "매일 데이터 집계 로직을 작성하고 검증하는 작업을 주로 하던 중, 프로젝트에서 권한 관리 기능이 필요하게 되었다. 권한 관리는 이전부터 구현해 보고 싶었던 기능 중 하나였고, 머릿속으로는 이미 구상이 다 되어 있어 자신만만하게 시작했지만, 역시나 쉽지 않았다. ( 특히, 관리 측면에서 신경 써야 할 부분이 많았다. )\n쉽게 만드실 수 수 수 수퍼노바 처음엔 각 팀별로 접근 가능한 아이디와 전체 접근 가능한 아이디를 만들어, 각 아이디의 권한에 따라 페이지 접근 시 보여지는 기능을 구분하면 될 것이라고 생각했다.\n기존 계정 관리 테이블에 각 공장과 팀별 고유 시퀀스를 할당할 수 있도록 user_acc 테이블을 만들어 UserId를 매핑했다. 이후, 웹 페이지에서 DataTable을 사용해 각 계정별 접근 권한이 주어진 팀을 체크할 수 있는 권한 관리 페이지를 만들었다. (원래는 HandersonTable을 사용하려고 했지만\u0026hellip;)\n하지만, 예기치 못한 문제가 발생했다. Flask를 사용하고 있었기 때문에 전역 객체 g를 활용하여 로그인 시 해당 ID의 권한 목록을 가져오려 했다. 그러나 전체 접근이 가능한 아이디로 권한 목록을 세션에 저장하려 할 때, 허용된 권한이 5개라면 유저 정보도 5개를 가져와 저장하기 어려운 상황이 발생했다.\n또 다른 문제는 JavaScript를 사용해 selectbox를 처리할 때, 특정 팀의 데이터만 볼 수 있도록 고정했지만, js 코드 중복으로 인해 의도한 대로 작동하지 않았다. 다른 js 파일에서 selectbox를 생성하는 방식 때문에, 렌더링 템플릿으로 적용되지 않았다.\n얘도 중복, 쟤도 중복 1. 유저 정보 중복 문제 해결 권한 개수만큼 유저 정보를 가져오는 문제를 해결하기 위해 g 객체에 권한 데이터를 딕셔너리로 추가하는 방법을 사용했다. 먼저, 로그인 시 아이디와 비밀번호를 통해 유저 정보를 확인하고, 해당 유저의 ID로 DB에서 권한을 조회하여 가져왔다. 마지막으로, 세션에서 사용하기 쉽게 딕셔너리 형태로 변환하여 저장했다.\n2. JavaScript 중복 문제 해결 JavaScript가 중복되는 문제는 다른 js 파일에서 select box를 생성하기 때문에 렌더 템플릿으로 적용되지 않았다. 해당 함수를 수정하여 일반 유저로 로그인 시 담당 공장만 선택할 수 있도록 변경했다. 구체적으로, select box를 동적으로 생성하여 사용자에게 허용된 선택지만 제공하는 방식으로 변경하여 중복 문제를 해결했다.\n배운점 비록 간단한 권한 관리 기능이었지만, 생각보다 신경 쓸 부분이 많았고, 특히 다음과 같은 점을 배웠다.\n테이블 분리의 중요성: 기능을 한 테이블에 모두 담으려 하지 말고, 세분화하여 관리하는 것이 중요하다는 교훈을 얻었다. JavaScript 코드 관리: JavaScript 코드가 중복되지 않도록 신경 써서 관리해야 함을 깨달았다. 권한 관리 기능을 통해 작은 문제라도 놓치지 말고 세심하게 살피는 것이 중요하다는 점을 다시 한번 되새기게 되었다. "
},
{
  "permalink": "http://localhost:1313/tags/database/",
  "title": "Database",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2024-05-20-signed-unsigned-data-type/",
  "title": "signed unsigned 데이터 타입",
  "tags": ["2024", "database"],
  "description": "테이블 값 오류 해결하기",
  "contents": "항상 출근하면 첫 번째로 하는 일은 대시보드 페이지에 접속해 어제와 현재의 각 공장별 데이터를 확인하여 이상이 없는지 점검하는 것이다.\n한동안 이상이 없었던 그래프가 지난주 금요일 데이터만 기하급수적으로 높게 치솟았고, SCADA에서 받아오는 데이터가 너무 높게 나오는 현상이 발생했다.\n데이터가 이상하게 저장되다니 완전 럭키비키잔앙 DB 테이블을 조회해 보니 -1.812019e-41과 같은 이상한 값이 저장되어 있었다. SCADA 에서 받아오는 값이 저장되는 거라 이상한 값이 저장되는 부분은 어쩔 수 없지만 데이터를 가져올 때 쿼리문에서 0으로 변환하려고 했다.\n\u0026lt;!-- 사용한 쿼리문 --\u0026gt; SELECT feedname ,max(cast(amount AS unsigned)) amount ,\u0026#39;THIS\u0026#39; bdate_type FROM {table_name} WHERE bdate IN ( SELECT DISTINCT bdate FROM {table_name} WHERE bdate \u0026lt;= % s AND bdate \u0026gt; % s AND cast(amount AS unsigned) \u0026gt;= 0 ) GROUP BY feedname 데이터베이스 테이블에서 확인된 값 -1.812019e-41는 부동 소수점 형식으로 저장되어 있는데, 이 값은 unsigned로 형변환할 수 없는 형식으로, amount 컬럼이 varchar(20)으로 지정되어 있어서 숫자로 처리할 수 없었다. ( 이러한 이슈로 인해 해당 쿼리문에서는 데이터를 올바르게 처리할 수 없었다. )\n해결을 하다니 완전 럭키비키니시티 잔앙 쿼리문을 수정하여 발생한 이슈를 해결하려고 했는데, amount 컬럼이 varchar(20) 형식이었고, -1.812019e-41 값만 계속해서 들어오는 문제만 발생했기 때문에, 이를 해결하기 위해 WHEN amount LIKE '%e-%' THEN 0 구문을 추가하여 해당 값을 0으로 변경하였고, 또한 unsigned를 signed로 수정하여 음수 값이 발생할 경우에도 적절히 처리할 수 있도록 했다.\n수정된 쿼리문은 다음과 같다.\n\u0026lt;!-- 사용한 쿼리문 --\u0026gt; SELECT feedname ,max(CASE WHEN amount LIKE \u0026#39;%e-%\u0026#39; THEN 0 ELSE cast(amount AS signed) END) amount ,\u0026#39;THIS\u0026#39; bdate_type FROM {table_name} WHERE bdate IN ( SELECT DISTINCT bdate FROM {table_name} WHERE bdate \u0026lt;= % s AND bdate \u0026gt; % s AND cast(amount AS signed) \u0026gt;= 0 ) GROUP BY feedname `amount` 컬럼을 `varchar`에서 `float` 또는 `double` 등 숫자 데이터 타입으로 변경하는 것이 더 적합할 수 있다는 생각이 드는데, 서버 DB에서 ORACLE 서버로 데이터를 보내주고 있어서 각 컬럼에 대한 정의를 조율해야 해서 마음대로 변경할 수 없었다. 이번 이슈 처리를 통해 DB의 데이터 타입에 처리에 대해 좀 더 이해할 수 있었고, 멀쩡하게 잘 돌아간다고 안심하고 있으면 안된다는 교훈을 얻었다. ( 항상 긴장감을 늦추지 말자. )\n"
},
{
  "permalink": "http://localhost:1313/tags/sftp/",
  "title": "Sftp",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2024-04-23-file-transfer-to-sftp/",
  "title": "역시 파일 전송은 SFTP",
  "tags": ["2024", "sftp"],
  "description": "맥에서 서버에 파일 업로드 하기",
  "contents": "추가 개발을 위한 개발 환경을 구축하고 있었는데, 새로운 테이블이 필요해서 다른 서버의 테이블을 가져와야 하는 상황이 발생했다. 전에는 Window로 파일을 보내 FileZilla(FTP 프로그램)를 사용하여 서버로 파일을 보냈었다. 하지만 이번에는 SFTP 기능을 사용하여 Mac에서 바로 업로드를 시도했다. SSH(Secure Shell)의 확장인 SFTP를 사용하면 데이터 전송이 암호화되므로 보안적인 이점을 제공하며, 이를 통해 중간에서의 데이터 유출을 방지하고 안전하게 파일을 전송할 수 있다고 한다.\nSFTP 너도 쓸 수 있어 SFTP 연결방법은 다음과 같다. ( iTerm2를 열며.. )\nsftp -oPort=port번호 username@server(ip 또는 url) 비밀번호를 입력하고 \u0026ldquo;sftp\u0026gt;\u0026rdquo; 프롬프트가 나타나면, SFTP에 성공적으로 로그인한 것이다. 이제 로컬 파일을 서버로 전송하려면 다음 명령을 사용한다.\nput /로컬/파일/경로/예시.txt /서버/디렉토리/경로/예시.txt /로컬/파일/경로/예시.txt는 로컬 시스템의 파일 경로 /서버/디렉토리/경로/예시.txt는 서버의 대상 디렉토리 경로 이렇게 하면 파일 업로드가 된다는데 나는 No such file or directory 에러가 발생했다. 이 에러는 일반적으로 서버에 대상 디렉토리가 없거나 업로드할 파일의 경로가 잘못되었을 때 발생한다고 한다. 하지만 로컬과 서버에서 pwd 명령어로 경로를 출력해서 사용했는데, 에러가 발생해서 당황스러웠다. 도커는 벽이야 파일 업로드가 실패한 이유로 도커(Docker)의 영향이 있었다. 일반적으로 SSH나 SFTP를 통해 서버에 연결할 때는 서버의 파일 시스템에 직접 접근할 수 있지만 Docker와 같은 컨테이너 기술을 사용할 때는 이러한 접근이 제한될 수 있다고 한다. 도커 컨테이너 내부에서 실행 중인 서비스나 어플리케이션은 호스트 시스템과 완전히 분리되어 있으며, 도커 호스트와는 별도의 파일 시스템을 가지고 있기 때문에 도커 컨테이너 내부에서는 호스트 시스템의 파일 시스템에 직접 접근할 수 없다고 한다.\n따라서 파일을 서버로 업로드할 때는 도커 컨테이너 내부의 경로가 아닌 도커 호스트의 경로를 사용해야 한다.\n새로 알게 된 부분 중에 제일 인상적인 것은 도커 호스트의 데이터베이스를 수정하면 서버 내부의 데이터베이스도 영향을 받는다는 점이었다. 도커 컨테이너 내부로 sql 파일을 어떻게 옮길지 고민했는데 다행이었다. "
},
{
  "permalink": "http://localhost:1313/tags/session/",
  "title": "Session",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2024-03-19-session-db-incident/",
  "title": "김승현 세션 DB 사건",
  "tags": ["2024", "session"],
  "description": "김승현이 세션을 생성하고 db에 저장한 사건이다.",
  "contents": " 김승현이 SpringBoot로 작업하면서 로그인 시 세션을 생성할 때 DB에 저장해버린 사건을 말한다.\n세션(Session)은 웹 애플리케이션에서 사용자의 상태를 유지하고 추적하는 데 중요한 역할을 한다. 일반적으로 세션은 서버 측에서 관리되며, 클라이언트와 서버 간의 통신을 통해 식별된다고 한다.\n이러한 세션 기반 로그인 기능을 구현하는 중에 세션의 관리 및 수명에 대한 부분을 잘 이해하지 못해서 바보 같은 짓을 벌이고 말았다.\n어떤 이슈를 만들었나 SpringBoot에서 HttpSession을 사용하여 세션을 관리하는 코드를 작성하고 있었는데 로그인 시 세션이 생성되고 DB에 저장되도록 구현했다. 다 끝낸 것 같았지만, 실행 중인 창을 닫으면 세션이 삭제되지 않는 문제가 발생했다. @PostMapping(\u0026#34;/login\u0026#34;) public String login(User user) { User existingUser = userMapper.findByUsername(user.getUsername()); if (existingUser != null \u0026amp;\u0026amp; existingUser.getPassword().equals(user.getPassword())) { // 로그인 성공 시 세션을 생성하고 DB에 저장 String sessionKey = httpSession.getId(); Session session = new Session(existingUser.getUserId(), sessionKey); sessionMapper.insert(session); return \u0026#34;redirect:/\u0026#34;; } else { return \u0026#34;login\u0026#34;; } } 보통 HttpSession은 사용자가 웹 애플리케이션에 접속할 때 생성되고, 브라우저를 닫거나 세션을 명시적으로 종료할 때 소멸되는데, DB에 세션을 저장하면 세션이 브라우저가 닫히거나 세션이 명시적으로 종료되지 않는 한 영구적으로 유지될 수 있다고 한다.\n일반적으로 보통 세션의 수명은 세션 생성 시 설정할 수 있으며, 기본적으로 브라우저가 닫힐 때 세션이 종료되도록 설정된다. 하지만 DB에 세션을 저장하는 경우, 이러한 종료 조건을 적용하기가 어려울 수 있다. 따라서 세션의 수명을 관리하고 세션을 종료하는 방법에 대해 추가적인 고려가 필요하다.\n그럼 언제 DB에 저장하나요?? 세션 데이터를 DB에 저장하여 관리하는 것이 유용할 때도 있다. 이를 통해 세션 데이터의 영속성, 클러스터 환경에서의 세션 공유, 그리고 세션 관리의 확장성과 안정성을 향상시킬 수 있다고 한다.\n사용자의 로그인 후 일정 시간 동안 세션 데이터를 유지해야 할 때 DB에 저장하여 영속성을 확보할 수 있다. 클러스터 환경에서 여러 서버 간에 세션을 공유해야 할 때 DB에 세션 데이터를 저장하여 일관된 세션 상태를 유지할 수 있다. 대규모 웹 애플리케이션에서 DB에 세션 데이터를 저장하면 서버의 확장성을 높이고 안정성을 확보할 수 있다. 세션을 DB에 저장하는 것은 유용하지만, 성능과 보안에 대한 고려 사항이 있으므로 프로젝트의 요구 사항과 환경을 고려하여 결정해야 한다고 한다.\n"
},
{
  "permalink": "http://localhost:1313/post/2024-02-18-need-to-understand-the-structure-of-database-tables/",
  "title": "테이블구조를 안본건 너무 심했잖아..",
  "tags": ["2024", "database"],
  "description": "데이터를 DB에 저장할 때 테이블 구조를 잘 보자",
  "contents": "기존에 진행한 프로젝트에 계정 관리 페이지를 만들어 달라는 요청이 있었다. 이전에 비슷한 작업을 많이 해보았기 때문에 큰 어려움 없이 개발할 수 있을 거라고 생각했다. 하지만 로그에 에러가 계속 찍혀서 확인해 보니 회원가입 양식에 정보를 입력하고 제출하면, 해당 정보를 데이터베이스에 저장하는 과정에서 문제가 발생한 것이었다. (기존 로그들이 너무 많아서 정신 나가는 줄\u0026hellip;)\n테이블구조를 안본건 너.. 무심했잖아 테이블 구조는 다음과 같았다.\nCREATE TABLE users ( member_id INT AUTO_INCREMENT PRIMARY KEY, user_id VARCHAR(20) NOT NULL, name VARCHAR(20) NOT NULL, password VARCHAR(100) NOT NULL, email VARCHAR(50) UNIQUE NOT NULL ); 위와 같이 데이터베이스의 테이블 구조를 정의했지만, 클라이언트 측에서는 다음과 같은 코드를 사용하여 데이터를 서버로 전송하고 있었다.\n$(\u0026#39;#addBtn\u0026#39;).on(\u0026#39;click\u0026#39;, function() { let USERID = $(\u0026#39;#add_USERID\u0026#39;).val(); let NAME = $(\u0026#39;#add_NAME\u0026#39;).val(); let PASSWORD = $(\u0026#39;#add_PASSWORD\u0026#39;).val(); let EMAIL = $(\u0026#39;#add_EMAIL\u0026#39;).val(); let addedData = { USERID: USERID, NAME: NAME, PASSWORD: PASSWORD, EMAIL: EMAIL, }; $.ajax({ url: \u0026#39;/api/account/save\u0026#39;, type: \u0026#39;POST\u0026#39;, contentType: \u0026#39;application/json\u0026#39;, data: JSON.stringify(addedData), success: function(response) { window.location.reload(); }, error: function(xhr, status, error) { console.error(error); } }); }); 문제는 사용자 입력값과 데이터베이스의 테이블 구조가 일치하지 않아 발생했다. 사용자가 입력한 데이터의 길이가 데이터베이스의 컬럼 길이 제한을 초과했기 때문에 발생한 문제였던 것이다.\n예를 들어, 사용자가 입력한 이름(name)이 20자를 초과하거나 비밀번호(password)가 100자를 초과하면 데이터베이스에 저장되지 않는다.\n해결 방안 해결 방법은 입력값의 길이를 제한하는 것이다. 사용자가 입력한 데이터의 길이를 제한하고 이에 대한 예외 처리도 해야 한다.\nHTML 코드 수정 \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;add_USERID\u0026#34; class=\u0026#34;form-control\u0026#34; maxlength=\u0026#34;50\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;password\u0026#34; id=\u0026#34;add_PASSWORD\u0026#34; class=\u0026#34;form-control\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;text\u0026#34; id=\u0026#34;add_NAME\u0026#34; class=\u0026#34;form-control\u0026#34; maxlength=\u0026#34;50\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;email\u0026#34; id=\u0026#34;add_EMAIL\u0026#34; class=\u0026#34;form-control\u0026#34;\u0026gt; \u0026lt;input\u0026gt; 태그의 maxlength 속성을 사용하여 입력값의 길이를 제한했고, type=\u0026quot;password\u0026quot;와 type=\u0026quot;email\u0026quot;을 사용하여 해당 필드의 형식을 명시함으로써 사용자가 올바른 형식의 데이터를 입력하도록 유도했다.\n`type=\u0026#34;email\u0026#34;` 속성을 사용하는 경우, 이메일 주소의 최대 길이를 제한하는 것은 일반적으로 권장되지 않는데, 그 이유는 이메일 주소의 최대 길이가 정해져 있지 않고, 일부 이메일 시스템은 긴 주소를 처리할 수 있기 때문이라고 한다. JavaScript 코드 수정 let USERID = $(\u0026#39;#add_USERID\u0026#39;).val(); let PASSWRD = $(\u0026#39;#add_PASSWORD\u0026#39;).val(); let NAME = $(\u0026#39;#add_NAME\u0026#39;).val(); let EMAIL = $(\u0026#39;#add_EMAIL\u0026#39;).val(); if (!USERID || !PASSWRD || !NAME || !EMAIL) { alert(\u0026#39;값을 입력해 주세요.\u0026#39;); return; } if 문을 추가하여 사용자가 입력 필드를 채우지 않은 채로 제출하려고 할 때 발생하는 예외 상황을 처리하도록 했다.\nPython 코드 수정 import hashlib def hash_password(password): hashed_password = hashlib.sha256(password.encode()).hexdigest() return hashed_password 사용자가 등록할 때 비밀번호를 해시화하여 데이터베이스에 저장한다. 이렇게 하면 데이터베이스에는 사용자의 실제 비밀번호가 저장되지 않으므로, 보안이 향상된다.\n이 경험을 통해 데이터베이스 테이블 구조를 설계할 때 입력값과의 일치성을 반드시 고려해야 한다는 것을 깨달았다. 데이터베이스의 테이블 구조를 정의할 때에는 사용자가 입력할 데이터를 고려하여 세심하게 설계하는 것이 중요하고, 입력값과 테이블 구조의 일치성을 확보함으로써 데이터의 무결성과 보안을 보장할 수 있다고 한다.\n"
},
{
  "permalink": "http://localhost:1313/tags/timestamp/",
  "title": "Timestamp",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2024-02-02-html-caching-timestamp-on-real-time-queries/",
  "title": "타임스탬프 우습게 보지마라",
  "tags": ["2024", "timestamp"],
  "description": "실시간 조회할 때 html 캐싱 timestamp",
  "contents": "실시간으로 화면을 보여주는 기능을 구현해야 해서 개발을 하고 있었는데 브라우저를 리프레시만 하는 간단한 기능이라 크게 어려움은 없었다. 그러나 살짝 쎄한 느낌이 들었는데, 아니나 다를까 실시간으로 업데이트된 내용이 화면에 보여져야 되는데 제대로 전달되지 않는 문제가 생긴 것이다.\n어쩐지 이상하더라 업데이트된 데이터가 제대로 보이지 않았던 이유는 캐시 된 파일을 계속 사용하고 있었기 때문이었다. 현재 분리된 HTML, JS, CSS 파일을 사용하여 웹 페이지를 구성하고 있는데, 브라우저는 이러한 파일을 캐싱 하여 성능을 향상시키고 네트워크 요청을 줄인다고 한다.\n해결방안 이 문제를 해결하기 위해 파일 이름에 타임스탬프(ts)를 포함하여 자동적으로 변경되도록 설정하여 캐시 무효화를 수행할 수 있도록 했다.\nHTML에서 스크립트 불러오기 \u0026lt;script src=\u0026#34;../static/js/jsfile.js?ts=12345\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 자동으로 타임스탬프 업데이트 \u0026lt;script\u0026gt; // 현재 시간을 기반으로 타임스탬프 생성 var timestamp = new Date().getTime(); // 스크립트 파일을 불러올 URL에 타임스탬프 추가 var scriptUrl = \u0026#34;../static/js/aa.js?ts=\u0026#34; + timestamp; // 스크립트 동적으로 생성하여 페이지에 추가 var scriptElement = document.createElement(\u0026#34;script\u0026#34;); scriptElement.src = scriptUrl; document.body.appendChild(scriptElement); \u0026lt;/script\u0026gt; JavaScript를 사용하여 자동으로 현재 시간을 기준으로 타임스탬프를 생성하고, 이를 파일 불러오는 URL에 추가한다. 이렇게 자동으로 타임스탬프를 업데이트하여 캐시를 무효화하면, 항상 최신 버전의 파일을 로드하여 웹 페이지의 실시간 업데이트를 즉각적으로 확인할 수 있다. "
},
{
  "permalink": "http://localhost:1313/tags/javascript/",
  "title": "Javascript",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2024-01-30-problems-when-drawing-a-screen-with-javascript/",
  "title": "괜히 JavsScript로 화면 그린 그날",
  "tags": ["2024", "javascript"],
  "description": "JavsScript로 화면 그렸을 때 문제점",
  "contents": "평소에는 HTML로 화면을 그리는 편인데, 오늘 처음으로 JavsScript로 도전하고 싶은 생각이 들었다. 참지 못하고 저질러버렸는데\u0026hellip; div 태그로 각각 그리드 나누고 패딩 조절하는 것보다 훨씬 코드량도 적고 간단해서 좋았다. 라고 생각한 지 10분도 안 돼서 문제가 생겼다..\n(코드가 짧고 단순하면 좋은 건 줄 알았지..)\n깝쭉거리지 마라 HTML로 하나씩 코딩을 하기엔 너무 번거롭다는 생각이 들었다. 그래서 반복문을 사용하면 간단하지 않을까 하는 생각? 자만?으로 다음 코드처럼 반복문을 사용해서 한 번에 화면을 그렸다.\n//예시 코드 drawBrowser = (row) =\u0026gt; { let rows = [row]; $.each(rows, function(index, item) { var div = $(\u0026#34;\u0026lt;div\u0026gt;\u0026#34;).addClass(\u0026#34;item\u0026#34;).text(item.name); $(\u0026#34;#container\u0026#34;).append(div); }); } 그러나 이렇게 되면 요소마다 스타일이나 이벤트 처리를 추가해야 하는 경우 코드가 더욱 복잡해진다. 따라서 코드가 길어지고 가독성이 떨어질 수밖에 없다. 또한, HTML, CSS, JavaScript가 분리되지 않아 유지 보수가 어려워지는데 코드의 변경이 필요한 경우 해당하는 수정하기도 번거로울 수 있다. 항상 겸손해라 위와 같은 이슈로 다시 겸손하게 HTML을 사용해서 화면을 그렸다. //예시 코드 \u0026lt;div id=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;item1\u0026#34;\u0026gt;name1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item2\u0026#34;\u0026gt;name2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item3\u0026#34;\u0026gt;name3\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;item4\u0026#34;\u0026gt;name4\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; 이번 경험을 통해 JavaScript에서 UI를 조작하는 것보다는 JavaScript와 HTML, CSS를 분리하여 사용해야 한다는 것을 알았고, 그렇게 되면 UI의 구조를 명확하게 나타내고, 가독성을 향상시킬 수 있다는 걸 몸소 느꼈다. 또한 무언가 시도하고 싶으면 시도했을 때 발생할 예외 상황을 꼼꼼하게 생각하고 도전해야 한다는 생각이 들었다.\n"
},
{
  "permalink": "http://localhost:1313/tags/ui/ux/",
  "title": "Ui/Ux",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2024-01-22-experience-project-planning/",
  "title": "기획하는 승현 감성 모르면 나가라",
  "tags": ["2024", "ui/ux"],
  "description": "기획은 쉽지 않았다",
  "contents": "UI/UX기획은 소프트웨어 또는 웹 애플리케이션을 디자인할 때 매우 중요한 단계이다. 그 동안 진행한 프로젝트는 내가 기획할 일이 없었기 때문에 별 생각이 없었지만, 이번에 간단한 프로젝트의 기획을 맡게 되어서 도전해보니 정말 난관이었다.\n(고려해야할 부분들이 너무 많잖아,,)\n기획, 해보고 싶어 프로젝트는 메인 페이지의 디자인 및 개발이 진행 중이며, 추가적으로 관리자 화면의 개발이 필요한 상황이었다. 그러나 적절한 기획이 이루어지지 않아 디자이너가 작업에 어려움을 겪고 있었는데, 구체적인 디자인 요구사항이 부족하여 사용자 경험에 대한 명확한 이해가 어려웠고, 따라서 사용자 인터페이스의 흐름, 화면 간의 연결성, 그리고 각 기능에 대한 사용자의 기대치 등에 대한 가이드가 필요했다. 초기 기획안\n나는 그저 가만히 옆에서 디자인 잘 나왔나 구경하고 있었는데 대표님이 나에게 이 프로젝트 관리자 화면 UI/UX 기획을 맡기셨다. 물론 지금은 바쁜 편이 아니지만, 기획을 해본적이 없어서.. 피그마를 만저 본 적이 없어서 급하게 디자이너에게 속성강의를 들었다. (그림에 소질이 진짜 없는데\u0026hellip;)\n기획을 무시하지 말자 초기 기획 단계에서는 각 페이지를 세세하게 구분하고 필요한 부분을 정리하는 데 주력했다. 처음에는 꼼꼼하고 구체적으로 디자인하였다고 생각했지만, 리뷰를 거치면서 예상치 못한 불편함과 추가 필요한 부분들이 드러나기 시작했다. (일단 디자인부터 꽝이다.)\n최종 기획안\n여러 차례의 피드백을 통해 최종적으로 완성되었지만, 내가 생각하는 것 이상으로 고려해야 할 사항들이 많았다. 특히, 사용자들의 관점에서 생각해야 한다는 점이 쉽지 않았는데, 이 경험을 통해 디자인과 기획에 있어서 사용자 중심의 접근이 얼마나 중요한지 깨닫게 되었다.\n"
},
{
  "permalink": "http://localhost:1313/tags/issue/",
  "title": "Issue",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2024-01-02-date-issue-as-the-year-changes/",
  "title": "새해 에러 많이 받으세요(?)",
  "tags": ["2024", "issue"],
  "description": "해가 바뀌면서으로 생기는 날짜 이슈",
  "contents": "새해가 되면서 기존에 진행했던 프로젝트의 Date 이슈가 우수수 쏟아졌다. 현재 년도와 이전 년도의 데이터를 DB에서 Date 기준으로 조회를 해서 가져와야하는데 그러지 못했다. devtools에서 수많은 에러 로그들을 마주했을 때 기분이란 참.. 허허\n문제점 기존 코드에서 지난달과 지지난달을 계산하려면 아래 코드처럼 이번 달에서 1과 2를 뺀 값을 사용했다.\nlet targetDate = bas_dt.substr(0, 7); let thisYear = parseInt(targetDate.substr(0, 4)); let lastYear = thisYear - 1; let thisMonth = parseInt(targetDate.substr(5, 2)); let lastMonth = thisMonth - 1; let lastMonth2 = thisMonth - 2; 이렇게 되면 아래 코드는 1월일 때, 이전 달은 0이 되며, 2월일 때 지지난달 또한 0이 되기 때문에 값을 가져올 수 없다. //현재 월과 DB에서 가져온 값을 조회하여 SUM let last_year_price = row.filter((item) =\u0026gt; { let itemYear = parseInt(item.bas_dt.substr(0, 4)); let itemMonth = parseInt(item.bas_dt.substr(5, 2)); return itemYear === lastYear \u0026amp;\u0026amp; itemMonth === lastMonth; }); 해결방안 if문을 사용하여 현재 연도에 따른 월, 주, 일이 어떻게 계산되고 있는지 검사하는 코드를 추가했다.\nif (lastMonth === 0) { lastMonth = 12; } else if (lastMonth === -1) { lastMonth = 11; } if (lastMonth2 === 0) { lastMonth2 = 12; } else if (lastMonth2 === -1) { lastMonth2 = 11; } 이슈가 발생하는 달은 1월과 2월이기 때문에 해당 월일 때 잘못 계산된 값이 나올 경우 정확한 값을 지정해 주었다. 이외에도 `filter` 조건을 계산하지 않고 `2023`이라고 지정해주어서 오류가 발생한 부분도 있었다. 다행이 빠르게 에러가 발생한 부분을 파악하고 대처했지만 코드애 대한 검토를 꼼꼼하게 했다면 어땠을까 하는 아쉬움이 든다. 또한 `if`문을 자주 사용는 습관을 들여서 항상 데이터를 검사하는 것도 중요하다는 생각이 들었다."
},
{
  "permalink": "http://localhost:1313/tags/2023/",
  "title": "2023",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/tags/oracle/",
  "title": "Oracle",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/series/study/",
  "title": "Study",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2023-12-09-deliver-oracle-database-data-in-different-environments/",
  "title": "오라클 DB 간 환경 설정",
  "tags": ["2023", "database", "oracle"],
  "description": "서로 다른 환경에서 오라클 데이터베이스 전달 시 발생하는 문제와 해결 방법",
  "contents": "대시보드 데이터를 생성하는 여러 가지 방법 중 하나가 상대 서버와 우리 서버에 같은 형태의 오라클 DB로 전달해 주는 방법이다. 해당 CLI가 매일 특정 시간에 실행되기 때문에 데이터 오류가 있으면 에러 로그를 보면 된다. 그런데 데이터가 올라오지 않는 이슈가 생겨서 DB의 테이블을 조회하려고 하니까 not a vaild month 에러가 발생했다.\n알고 보니 각각의 환경 설정이 달라서 생긴 에러였다.\n따라 이번 글에서는 서로 다른 환경에서 오라클 데이터베이스 전달 시 발생하는 문제에 대한 해결 방법에 대해 알아보려 한다.\n서로 다른 환경에서 오라클 데이터베이스 전달 시 발생하는 문제와 해결 방법 오라클 데이터베이스 간에 데이터를 전달하는 과정에서 서로 다른 환경 설정으로 인해 발생하는 에러는 흔한 문제라고 한다.\n이러한 문제를 해결하기 위해서는 몇 가지 주요한 단계들을 고려해야 한다.\n네트워크 및 접속 설정 확인\n각각의 데이터베이스에 대한 네트워크 접속 설정을 확인해야 한다.\n서로 다른 데이터베이스 간에 접속할 때 필요한 포트, 호스트 주소 등을 검토해야 한다.\n버전 및 호환성 확인\n데이터베이스 버전의 차이로 인해 발생하는 호환성 문제도 주의해야 한다.\n오래된 버전에서 새로운 버전으로 데이터를 이동하는 경우, 호환성 문제가 발생할 수 있다.\n문자 인코딩 및 로캘 설정\n각 데이터베이스의 문자 인코딩과 로캘 설정이 서로 다를 경우, 데이터를 전달하거나 쿼리를 실행할 때 문제가 발생할 수 있다.\n이 경우, 적절한 인코딩 설정을 맞춰주어야 한다.\n권한 및 권한 부여\n데이터베이스 간 접근 권한과 사용자 권한 설정을 확인한다. 데이터를 가져오거나 전송할 때 필요한 권한이 충분한지 확인해야 한다.\n오류 메시지 및 로그 분석\n발생하는 오류 메시지나 로그를 분석하여 문제를 파악한다.\n종종 오류 메시지에 원인에 대한 힌트가 있을 수 있다.\n맵핑 및 변환\n서로 다른 데이터베이스 스키마 간의 필드 맵핑이나 데이터 형식 변환에 주의해야 한다.\n데이터 형식이나 구조가 다르면 변환이 필요할 수 있다.\n테스트와 모의 작업\n모든 설정을 확인한 후에는 실제 데이터를 이전하기 전에 테스트 및 모의 작업을 수행해야 한다.\n작은 양의 데이터부터 시작하여 전체 전송 전까지 여러 단계를 거쳐 확인한다.\n내가 삽질했던 not a vaild month 에러는 날짜 형식이 잘못 입력되었거나, 다른 환경 설정으로 인해 발생할 수 있는 문제 중 하나라고 한다.\n이 문제는 언어 및 로캘 설정이 다를 경우 발생할 수 있기 때문에 두 DB 간에 설정을 맞추는 것이 중요하다.\n또는 데이터를 전달할 때, 오라클의 TO_DATE 함수를 사용하여 명시적으로 날짜 형식을 지정해 주는 것이 도움이 될 수 있다.\n위 함수를 통해 날짜 형식이 일관되게 변환되어 오류를 방지할 수 있다.\n"
},
{
  "permalink": "http://localhost:1313/tags/cloud/",
  "title": "Cloud",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2023-11-24-how-projects-relate-to-the-cloud/",
  "title": "프로젝트와 클라우드 연관성",
  "tags": ["2023", "cloud"],
  "description": "프로젝트와 클라우드 연관성",
  "contents": "회의 시간에 클라우드에 대한 얘기가 나왔는데 잘 이해하지 못했다. 클라우드 기술은 프로젝트 관리를 더욱 유연하고 효율적으로 만들어주며, 이를 통해 팀원들 간의 협업과 정보 공유가 원활해질 수 있기 때문에 배워야 할 중요한 기술 중 하나라는 생각이 들었다.\n따라서 이번 글에는 프로젝트와 클라우드의 연관성에 대해 알아보려 한다.\n클라우드 컴퓨팅의 주요 장점 유연성과 확장성\n클라우드는 필요에 따라 자원을 신속하게 확장하거나 축소할 수 있는 유연성을 제공한다.\n프로젝트의 요구사항이나 규모에 맞춰 리소스를 조정할 수 있다. 비용 효율성\n자체적으로 IT 인프라를 구축하는 대신 클라우드를 사용하면 초기 투자 비용을 절감하고 유연한 비용 모델을 통해 필요한 만큼의 비용을 지불할 수 있다. 보안과 백업\n대부분의 클라우드 제공 업체들은 강력한 보안 기능을 제공하며, 데이터의 안전한 보관과 백업을 지원하여 데이터 손실 및 보안 위협으로부터 보호할 수 있다. 협업과 접근성\n클라우드는 여러 사용자가 동시에 작업하고 협력할 수 있도록 하는 협업 도구를 제공한다.\n이를 통해 지리적으로 분산된 팀이나 구성원 간의 작업이 효율적으로 이루어진다. 프로젝트에 클라우드 컴퓨팅 적용하기 자원 최적화와 관리\n프로젝트 초기에는 클라우드의 유연성을 활용하여 필요한 만큼의 리소스를 할당한다.\n프로젝트 진행에 따라 필요한 자원을 동적으로 조정하여 효율적으로 관리한다. 팀 협업 강화\n클라우드 기반의 협업 툴을 활용하여 팀원들 간의 소통과 작업을 원활하게 진행할 수 있다.\n문서 공유, 실시간 편집 등의 기능을 활용하여 효율성을 높인다. 데이터 보호와 안전성\n클라우드는 데이터 보호를 위한 다양한 보안 기능을 제공한다.\n프로젝트의 중요한 정보를 안전하게 저장하고 백업하여 데이터 손실을 방지한다. 프로젝트 관리 및 생명주기\n클라우드 기반의 프로젝트 관리 도구를 활용하여 프로젝트의 진행 상황을 모니터링하고 관리한다.\n생명주기 관리를 효과적으로 수행하여 프로젝트의 성과를 최적화한다. 클라우드 컴퓨팅은 프로젝트 관리에 있어서 적재적소에 활용되어야 할 것 같다는 생각이 든다.\n지금 당장은 아니지만 추후에 이 기술을 배워서 프로젝트의 효율성을 향상시키고 성공적으로 이끌어 나갈 수 있기를 기대해 본다.\n"
},
{
  "permalink": "http://localhost:1313/post/2023-10-19-endless-requests-for-ui-modification/",
  "title": "UI 수정지옥",
  "tags": ["2023", "ui/ux"],
  "description": "2주 동안 UI 수정만 했다..",
  "contents": "프로젝트를 진행하기 전 개발하기로 한 대시보드는 사무용 대시보드 한 개였다. 하지만 프로젝트 마감이 한 달 정도 남은 시점에서 현장용 대시보드도 필요하다는 요청이 있었다.\n지금은 SCADA에서 가져오는 데이터를 화면에 뿌려야 하는 작업을 하고 있는데 데이터 맞추는 것에 시간을 많이 투자하고 있었다.\n결론적으로는 추가적으로 현장용 대시보드를 개발했지만 UI 부분에서 많은 대화(?)를 해도 계속되는 수정에 지치기도 했고 배울 점도 있어서 정리해 보려 한다.\n어제랑 말이 다르잖아요 우선 초안으로 받은 UI는 받자마자 빠르게 작업을 진행했다.\n퇴근 전에 완료 메일을 보냈는데 다음 날 출근하자마자 연락이 와서 수정해야 할 것이 있다고 했다.\n자잘한 글씨 크기나 색 변경이 아니라 표시하는 내용을 3개 추가해야 했는데 지금도 화면에 꽉 차 있는데 추가를 해버리면 무조건 줄바꿈이 일어나는 상황이었다. 이러한 수정 반복을 2주 정도 반복하다 보니 정신적, 육체적으로 피로가 쌓이는 느낌이었다.\n할 일은 많은데 계속 수정사항이 발생하다 보니 조금은 예민해지는 것 같았다. 화면이 추가됨에 따라 Js 로직도 더 추가되고, 각각의 전력, 에너지량의 계산식도 다르고.. 힘들고.. 정신 나갈 거 같고..\n지금 생각해 보면 수정 사항에 대한 회의를 많이 하면서 효율적이고 배려하는 대화 스킬을 조금은 이해할 수 있었고, 바로 피드백을 한다는 것이 처음엔 감시 당하는 느낌이라 짜증이 났지만 업무 효율과 진행에 있어 빠르게 처리할 수 있지 않나라는 생각이 든다. 뭐든 내가 해야 할 일이기 때문에 기분 나쁘게 하면서 일을 하기보단 다 내 뼈와 살이 된다고 생각하면서 긍정적인 마인드로 임해야겠다는 생각이 들었다.\n"
},
{
  "permalink": "http://localhost:1313/tags/crontab/",
  "title": "Crontab",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/tags/linux/",
  "title": "Linux",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2023-09-21-clone-tab-and-shell-scripts/",
  "title": "크론탭 #!bin/sh",
  "tags": ["2023", "crontab", "linux"],
  "description": "#!/bin/sh가 의미하는 것",
  "contents": "크론탭은 리눅스 시스템에서 주기적으로 작업을 실행할 수 있게 해주는 유용한 도구이다.\n이를 활용하여 특정 시간에 스크립트를 실행하고 싶을 때, 쉘 스크립트는 강력한 도구가 된다.\n쉘 스크립트를 작성할 때 가장 먼저 보이는 #!/bin/sh는 해당 스크립트가 어떤 쉘에서 실행되어야 하는지 지정하는 부분이다. 하지만 아직 크론탭에 익숙해져 있지 않아서 쉘의 경로를 지정하지 않고 작업하려고 하다가 삽질을 오래 한 적이 있다.\n따라서 이번 글에는 다양한 환경에서 스크립트가 어떻게 작동하는지 알아보려 한다.\n#!/bin/sh을 아세요?? 쉘 스크립트를 작성할 때 가장 먼저 보이는 #!/bin/sh는 해당 스크립트가 어떤 쉘에서 실행되어야 하는지 지정하는 부분이다.\n하지만 이 경로는 서로 다른 환경에서 다를 수 있기 때문에 종종 #!/bin/sh가 의미하는 바를 다르게 이해하기도 한다. #!/bin/sh에서 /bin/sh는 일반적으로 시스템의 기본 쉘을 나타낸다.\n이것은 쉘 스크립트가 리눅스나 유닉스 기반 시스템에서 실행될 때 사용되는 기본적인 경로를 말한다.\n하지만 다양한 리눅스 배포판이나 다른 운영체제에서는 이 경로가 다를 수 있다. 따라서 #!/bin/sh는 실제 스크립트가 실행될 환경에 따라 쉘의 경로를 지정하는 것이라고 볼 수 있다.\n예를 들어, 서로 다른 환경에서는 각기 다른 경로로 설정될 수 있으며, 이는 해당 시스템에서 사용하는 기본 쉘의 위치에 따라 달라진다. 이러한 유동적인 경로 설정은 스크립트를 다른 환경으로 이동시킬 때 특히 중요하다.\n다양한 운영체제나 다른 시스템에서도 스크립트가 동작할 수 있도록 유연하게 작성할 수 있도록 도와준다. 요약하자면, #!/bin/sh는 해당 스크립트가 실행될 환경의 기본 쉘을 나타내며, 다양한 환경에서의 호환성을 유지하며 유연하게 작동할 수 있도록 도와주는 중요한 역할을 한다.\n"
},
{
  "permalink": "http://localhost:1313/post/2023-09-02-approach-as-a-problem-solving-to-recursive-formula/",
  "title": "점화식적 사고를 하자",
  "tags": ["2023", "issue"],
  "description": "문제 해결의 점화식적 사고로, 반복되는 문제에 효과적으로 대응하기",
  "contents": "프로젝트에서 문제가 발생하면 나는 항상 발생한 문제에 대응하여 해결책을 찾는 데 집중한다. 하지만 문제를 해결하고 나면 별생각 없이 넘어가는 편이었다. 그러나 비슷한 문제가 반복해서 발생하는 경우 매우 귀찮기도 하고 답답할 때가 많아서 대표님에게 조언을 구한 적이 있었다. 대표님은 \u0026lsquo;하나의 문제는 단 한 번만 발생해야 하며, 어떠한 문제에서 DP 규칙성을 찾아 그 규칙성으로 하여금 점화식을 찾아서 해결해야 한다.\u0026rsquo; 라고 말씀하셨다. 따라서 이번 글에서는 점화식적 사고를 도입하여 문제를 해결하는 방법에 대해 알아보려 한다.\n점화식적 사고란 점화식은 이전 단계의 값을 기반으로 다음 값을 찾는 수학적 원리를 말한다.\n즉, 처음 문제가 발생했을 때, 그 문제를 근본적으로 이해하고 해결하는 데 초점을 맞추는 것이다.\n이를 바탕으로 비슷한 문제들에 대한 해결책을 파악해냄으로써, 미래에도 비슷한 문제에 대처할 수 있는 능력을 키울 수 있다고 한다. 점화식적 사고를 적용하려면 처음 문제가 발생했을 때, 그 원인과 특성을 꼼꼼히 파악하고, 이를 해결하기 위한 첫 번째 단계를 찾아야 한다.\n이 단계를 마치 점화식의 초기 항처럼 여기고, 이를 바탕으로 비슷한 상황에 대응할 수 있는 해결책을 찾아내면 된다고 한다.\n(말은 쉽지\u0026hellip;) 이러한 방식은 문제의 본질을 깊이 이해하고, 비슷한 문제들에 대한 효과적인 해결책을 만들어내는 데 도움이 된다고 한다.\n한 번의 문제 해결을 통해 비슷한 상황에 대한 해결책을 만들어냄으로써 효율성을 높일 수 있다. 문제가 발생했을 때 그 문제 자체에만 집중하는 것이 아니라, 문제 해결의 점화식적 사고를 통해 해당 문제를 해결하는 방법을 배우고, 미래에 반복되는 문제에 대처할 수 있는 능력을 기르는 것이 중요하다고 한다.\n이를 통해 더욱 효과적으로 문제를 해결하고, 지속적인 성장을 이룰 수 있을 것이라 기대한다.\n천천히 적용해가면서 이해하고 익숙해져야 될 것 같다.\n"
},
{
  "permalink": "http://localhost:1313/tags/backup/",
  "title": "Backup",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2023-08-30-have-to-pay-attention-to-file-management/",
  "title": "백업하기 vs 백업 안 하고 백억 받기",
  "tags": ["2023", "backup", "issue"],
  "description": "파일 관리에 주의를 기울여야 한다.",
  "contents": "오늘 크론탭을 수정해야 하는 이슈가 생겨서 코드를 수정하고 실행하고 반복하고 있었다. 그런데 로그 찍히는 속도가 많이 더뎌서 코드의 문제인가 하고 살펴보니 디렉토리에 파일이 1000개 정도 있는 것이었다. 바로 대표님의 호출.. 백업도 틈틈히 안한 이슈도 스윽 얹어서 파일 관리의 중요성에 대한 설명을 들었다.\n(평소에 정리랑 친하지가 않아서..) 따라서 이번 글에서는 파일 관리에 대해 정리해 보려 한다.\n백업은 생명줄..?? 내가 백업이 중요하다고 느꼈던 것은 이전 버전(?)의 코드를 가져와야 했을 때다. Git을 사용하고 싶었지만 (잘 몰라서 배우고 싶었는데..) 그럴 수 없는 상황이라 백업 스크립트를 만들어서 사용하고 있는데 제일 피하고 싶은 상황은 백업을 하지 않고 코드를 수정하고 저장했을 때 수정 전으로 돌려달라 하는 상황이다. 백업이 필요한 가장 큰 이유는 데이터 손실을 방지하고 데이터를 빠르게 복구할 수 있도록 도와주기 때문이다. 하지만 나처럼 디렉토리에 파일이 1000개 정도 있는 상황이라면 문제를 발생시킬 수 있다. 디렉토리가 꽉 차있기 때문에 백업 파일도 저장 공간을 많이 차지할 것이고, 백업 시간이 오래 걸릴 것이다. 또한 파일이 많으면 백업 및 복구 중에 파일 간의 충돌이나 중복으로 인한 오류가 발생할 가능성이 높다고 한다. 따라서 파일이 많을 경우에는 다양한 접근 방법을 고려해야 한다. 우선 디렉토리와 파일을 구조화하여 효율적으로 관리할 수 있도록 구성해야 하고, 사용하지 않는 파일이나 불필요한 파일을 정기적으로 정리해야 한다. 아니며 중요한 파일이나 변경된 파일에 중점을 두어 선택적으로 백업하는 방법도 있다.\n"
},
{
  "permalink": "http://localhost:1313/tags/data/",
  "title": "Data",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2023-08-21-data-grows-processing-needs-to-be-done-faster/",
  "title": "데이터 비만에서 살아남기",
  "tags": ["2023", "data"],
  "description": "데이터가 늘어날수록 처리를 빠르게 해야한다",
  "contents": "주간 회의 시간에 대표님께서 항상 말씀하시는 것이 있다. 현재 맡고 있는 프로젝트에 대해 항상 더 발전시키고 향상시킬 생각을 하자. 라는 말인데 이를 내가 맡은 프로젝트에 적용해 보면 어떤 부분이 있을까 하는 생각이 들었다. 고민을 해보니 대시보드 특성상 데이터가 늘어나고 이에 따라 처리가 느려지는 이슈가 생각이 났다. 데이터가 늘어날수록 대량의 데이터를 빠르게 저장하고 검색하는 것은 쉽지 않으며, 이로 인해 성능 저하와 함께 데이터 분석에 소요되는 시간이 길어지는 문제가 발생한다. 검색해 보니 이에 대한 해결책으로 일라스틱 서치와 키바나의 조합이 빛을 발하고 있다고 한다. 따라서 이번 글에서는 위 두가지에 대해 정리해보려 한다.\n일라스틱 서치(Elasticsearch)와 키바나(Kibana)는 주로 데이터 분석 및 시각화를 위해 사용되는 오픈 소스 소프트웨어라고 한다. 두 제품은 주로 로그 및 이벤트 데이터와 같은 대량의 데이터를 저장, 검색 및 시각화하기 위해 설계되었고, Logstash라는 다른 오픈 소스 도구와 결합하여 사용될 때 전체적인 솔루션을 형성한다고 한다.\n이들은 일반적으로 ELK 스택이라고도 부른다.\n일라스틱 서치의 역할 빠른 검색 및 분석 엔진 일라스틱 서치는 실시간 검색 및 분석 엔진으로, 데이터의 색인화와 검색을 빠르게 처리할 수 있다. 대용량 데이터에 대한 탁월한 성능을 보장하며, 확장성 있는 아키텍처를 통해 데이터 양이 증가하더라도 높은 성능을 유지할 수 있다. 분산 아키텍처 일라스틱 서치는 데이터를 분산하여 저장하고 처리함으로써 데이터 양의 증가에 유연하게 대응할 수 있다. 클러스터링과 샤딩을 통해 데이터의 안정성과 가용성을 보장하면서도 성능을 향상시킨다. 키바나의 시각화와 인터랙션 시각화 도구로 데이터 이해 키바나는 Elasticsearch에서 수집된 데이터를 시각적으로 표현할 수 있는 강력한 도구이다. 다양한 차트와 그래프를 활용하여 데이터의 흐름과 경향을 빠르게 파악할 수 있다. 대시보드 구축 키바나를 통해 직관적이고 사용자 친화적인 대시보드를 구축할 수 있다. 이를 통해 데이터의 상태를 실시간으로 모니터링하고 필요한 정보에 빠르게 접근할 수 있다. 지금 당장 두 가지를 배우고 사용할 수는 없지만 나중에 프로젝트가 마무리되고 더 개선할 수 있을 것 같다는 생각이 들어 추후에 공부해 보고 싶다.\n"
},
{
  "permalink": "http://localhost:1313/post/2023-08-10-check-before-project-development/",
  "title": "프로젝트 진행 전 체크사항",
  "tags": ["2023", "issue"],
  "description": "첫 실무 프로젝트를 쉽게 본 코린이..",
  "contents": "프로젝트를 진행하기 전에는 개발에만 집중하면 무난하게 흘러갈 줄 알았다. 이 생각은 정확히 업무 메일을 받은 지 10분 만에 산산조각 나버렸다. (근거 없는 자신감은 저를 불안하게 해요,,)\n이게 다 뭔데 메일에는 내가 처음 보는 업무 용어들이 수두룩했다. 정확히 이해하지는 못했지만 눈치껏 프로젝트가 어떻게 진행될 예정이고, 이에 따라 서로 필요한 부분을 공유하는 내용 같았다. 나는 개발 파트를 맡고 있기 때문에 DB나 서버 설치와 같은 운영환경이 구축되기 전까지 조금 여유가 있었다. 그렇다고 마냥 기다리는 게 아니라 환경이 구축되기 전에 업무 분석 및 설계를 최대한 진행해야 했다. (잠시 숨 좀 돌리는 줄 알았는데..) 업무 분석 및 설계는 개발 진행 전 대비라고 할 수 있다. 데이터는 언제부터 올라오는지, UI는 기존 그대로 가야 하는지 혹시나 수정할 내용은 없는지 등을 먼저 물어보고 체크해야 했다. 처음에는 회의 때 듣고 정한 내용들이 있는데 그걸 참고하면 되지 않을까 했지만, 항상 예외 상황도 있고 끊임없이 수정사항이 생기기 때문에 미리 체크해야 한다고 배웠다. UI는 아예 갈아엎을 수도 있다는 말을 듣고 그런 일은 일어나지 않기를 기도했다. (개발자 = 디자이너인가..)\n지금은 프로젝트에 필요한 파일들을 살펴보고 있는데, 양이 많아서 폴더로 정리해야 할 것 같다. 그래도 업무 전화나 메일을 주고받으면서 진짜 개발자가 되어보는 경험을 하는 것 같아서 떨리기도 설레기도 한다. 물론 엄청 긴장한 상태로 전화를 받고, 메일을 보내다 보니 이렇게 하는 게 맞나 싶은 상황들이 많아 좀 찝찝할 때도 많다. 하다 보면 점차 익숙해지고 의사소통하는 능력도 배울 수 있을 것 같다.\n"
},
{
  "permalink": "http://localhost:1313/tags/business-trip/",
  "title": "Business Trip",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2023-08-02-it-aint-over-till-its-over/",
  "title": "어서와 출장은 처음이지?",
  "tags": ["2023", "business trip"],
  "description": "새로운 프로젝트 회의를 가게되었다.. 멀리(?)",
  "contents": "새로운 프로젝트를 맡게 되었다. 기존에 마무리한 프로젝트와 유사하지만 데이터 구성이 전혀 다르기 때문에 설렘 반 긴장 반이다. 또한 지난 프로젝트는 이미 40% 정도 진행된 상태에서 참여했다면, 이번에는 처음부터 내가 맡아서 진행하게 된다. 당황스러운 것은 회의를 하러 출장을 가야 한다는 점이다..\n회의하기 어렵다 회의 장소가 청주이기 때문에 회사 앞 광명역에서 KTX를 타고 갔다. 기차 + 택시로 넉넉하게 1시간 30분 정도 걸렸는데 지하철역 택시 줄이 길어서 조금 당황스러웠다. (모든 청주 택시들이 모여있는 듯한..??)\n생각보다 일찍 도착해서 출입증을 받으려고 했는데 노트북의 현재 사용 메모리와 사용 가능 메모리를 적어야 했다. byte 단위로 표시하려면 터미널 명령어로 df -b 를 입력하면 된다. (5분 동안 몰라서 헤맸던 것은 안 비밀..)\n우여곡절 회의실에 들어갔는데 예상치 못한 상황에 굉장히 당황스러웠다. 회의실에는 대략 12명 정도의 직원분들이 계셨고 그 사이에 나랑 대표님은 가벼운 인사와 함께 조심스레 자리에 앉았다. (아무 일도 없었지만 압도당하는 기분..)\n열심히 경청하는 것도 회의다 회의는 약 2시간 정도 진행되었다. 체감 시간은 한.. 5시간 정도?? 대부분 클라이언트 쪽 일정이나 프로젝트 진행 방향에 대한 이야기여서 가만히 앉아 메모할 내용들을 적으면서 회의에 집중하고 있었다. 가장 중요하게 생각하는 것은 UI 디자인이었는데 샘플 프로젝트의 UI를 그대로 가져가되 계속 수정해야 할 것 같은 불길한 예감이 들었다.\n그래도 차 부장 급분들의 회의에 참여해서 어떻게 이루어지는지 파악할 수 있었고, 처음으로 내가 개발자라고 클라이언트에게 당당하게 소개될 수 있는 자리라 기분이 묘했다. 이 프로젝트가 진행되면서 내가 소통할 분들이기 때문에 많이 어렵겠지만 좋은 인상을 남기려 노력했다. (입은 항상 웃고 있답니다.??) 처음 타지로 가서 클라이언트와 프로젝트 회의도 할 수 있어서 좋은 경험이 된 것 같다. 사람마다 각자 업무 스타일이 다르기 때문에 서로 답답해하거나 충돌하지 않을까 하는 걱정이 조금 들기도 한다. 그래도 내가 프로젝트 기획부터 개발까지 다 참여하는 첫 프로젝트이기 때문에 애정을 같고 열심히 해보려 한다.\n"
},
{
  "permalink": "http://localhost:1313/post/2023-07-18-review-first-project-service-open/",
  "title": "[Review] 나의 첫 번째 프로젝트",
  "tags": ["2023", "review"],
  "description": "처음으로 참여한 프로젝트 리뷰",
  "contents": "지난 3월에 처음으로 실무 프로젝트에 참여하고 약 4개월 만에 프로젝트를 서비스하게 되었다. 원래는 훨씬 전에 서비스를 했어야 하는데 진행하던 프로젝트에 추가 개발이 생겨서 조금 길어지게 되었다.\n내가 개발한 프로젝트를 사람들이 사용한다는 것에 기분이 이상하기도 하고 뿌듯하기도 하다. 완벽하게 완성한 것은 아니지만 다른 프로젝트를 맡을 예정이라서 이번 프로젝트에 참여하면서 배운 점들을 기록하려 한다.\n지속적인 커뮤니케이션의 중요성 초반에는 PM과 직접적으로 소통하지 않고 대표님을 통해서 전달받거나, 회의할 때 옆에 가만히 앉아있는 경우가 많았다. 매일 2–3번씩 크고 작은 회의를 진행했는데 신기하게도 회의만 하면 긴장해서 그런지 기가 빨려서 하루 종일 텐션이 낮아진다. (그럴 땐 칼퇴가 만병통치약이죠..?)\n지금은 거의 나 혼자 커뮤니케이션을 하는 일이 많아졌다. 대표님이 바쁘시기도 하고, 내가 담당하는 프로젝트니까 바로바로 대응해 줘야 한다.. 그러다 보니 뭔가 개발하는 시간보다 회의하고 소통하는 시간이 더 많을 때도 있었다\n(강조되고 반복되는 전화 벨 소리는 개발자를 불안하게 해요..)\n꾸준하게 프로젝트의 진행 상황을 공유하고 의견을 나누는 시간을 가지다 보니 문제점을 빠르게 파악하고 조치할 수 있었다. 미리 회의할 내용을 잘 정리하는 것과, 회의하면서 나온 얘기들 중 중요 사항을 메모하여 빠르게 이해하고 파악 하는 게 중요한 것 같다.\n예상치 못한 문제들이 생기는 것은 정상적인 현상 프로젝트를 진행하면서 예상치 못한 문제들이 발생할 때마다 처음에는 당황스러웠다. 분명히 어제 퇴근하기 전까지는 아무 이상 없이 돌아가는 걸 확인했는데, 다음날 출근하면 갑자기 에러가 생기고,, 버그 잡다가 하루가 다 가버리는 날들이 자주 있었다.\n특히 괄호를 안 닫거나 오타를 치는 사소한 실수로 생긴 에러를 바로 해결하지 못하고 삽질했을 때는 현타가 쎄게 온다. (버그 잘 잡는 것도 훌륭한 개발자랍니다??)\n하지만, 이런 크고 작은 이슈들을 해결하면서 더 큰 성취감과 자신감을 얻을 수 있었다. 해결해 나가는 과정에서 새로운 기술, 도구 및 접근 방식에 대한 지식을 습득하고, 비슷한 상황에서 동일한 실수를 줄이는 등 실력이나 경험적으로 성장할 수 있는 점도 긍정적이었던 것 같다. (앞으로 마주칠 수많은 문제들을 달게.. 받아야겠지??)\n마지막으로 내가 가장 크게 느낀 것은 기간이 아무리 길어도 빠듯하다는 것이다. 뭐든지 계획한 대로 진행되는 일은 없고 어떠한 예외 상황이 일어날지 모르기 때문에 여유 부리지 말고 매일 최대한의 아웃풋을 내야 한다고 생각한다.\n아직 많이 부족하고 배워야 할 부분이 많지만 조급해하지 않고 단계를 하나씩 밟아가면서 발전하고 싶다.\n"
},
{
  "permalink": "http://localhost:1313/tags/review/",
  "title": "Review",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2023-07-09-iterm2-vs-vscode-in-linux-environment/",
  "title": "iTerm2 vs VSCode in Linux",
  "tags": ["2023", "linux", "tool"],
  "description": "Linux 환경에서 원격으로 개발할 경우 iTerm2와 VSCode",
  "contents": "리눅스 환경에서 원격 접속으로 개발하는 경우, 효율적인 작업 환경을 선택하는 것은 매우 중요하다.\n입사하고 나서는 iTerm2에서 작업을 했는데, 최근에 Visual Studio Code로 작업을 해보니 너무 편하고 좋았다. (현재 맥북으로 개발을 하고 있기 때문에 터미널 에뮬레이터로 iTerm2를 사용하고 있다.)\n따라서, iTerm2와 Visual Studio Code의 작업환경의 차이점에 대해 알아보려 한다.\nVSCode 그는 신인가..? 처음 터미널에서 작업했을 때는 vim 편집기에 적응하느라 오래 걸렸다. 마우스를 사용하지 못하는 부분도 힘들었지만, 단축키를 몰라서 작업을 할 때 크롬에 ‘맥 Vim 단축키 모음’을 검색하고 창을 따로 띄워놔야 했다. (마우스는 중요한 도구였구나..)\n하지만 어느 정도 익숙해지니 작업 속도가 점점 빨라졌다. 이제는 타자를 치다가 마우스를 잡아야 할 때 생기는 그 잠깐의 멈춤이 거슬리는 수준이 되었다. (마우스는 중요한 도구였을까..?)\n사실 VSCode가 너무 인기가 많아서 홍대병 말기인 나는 사용하지 않으려 했는데, VSCode 신봉자이신 책임분이 자꾸 ‘VSCode가 최고다’라며 계속 영업을 하셔가지고 원격 접속 플러그인을 설치하고 작업을 해봤다.\n확실히 VSCode에서 사용할 수 있는 플러그인으로 인해 개발이 편해지고 코드 정렬이나, 오류 체크 등 터미널에서는 직접적으로 확인할 수 없는 기능들을 제공받아서 너무 편하다고 생각했다. (하지만 이제 ‘vim 편집기’ 플러그인도 깔아버린\u0026hellip;)\n작업환경의 차이점 기능 iTerm2는 주로 터미널 작업에 초점을 맞추고 있으며, 기본적으로 명령줄 인터페이스를 사용한다. 반면에 VS Code는 강력한 편집기와 다양한 개발 도구를 포함한 통합 개발 환경으로서, 코드 편집, 디버깅, 플러그인 등의 기능을 제공한다. 사용자 인터페이스 iTerm2는 터미널 창을 중심으로 한 사용자 인터페이스를 가지고 있으며, 다중 탭, 분할 창 등의 터미널 관리 기능을 제공한다. VS Code는 편집기 창을 중심으로 한 사용자 인터페이스를 가지고 있으며, 편집기와 탐색기, 터미널 등을 조합하여 개발 작업을 수행할 수 있다. 확장성 VS Code는 플러그인 시스템을 통해 다양한 기능을 확장할 수 있으며, 개발자들은 원하는 기능을 플러그인으로 설치하고 사용할 수 있다. iTerm2도 일부 기능을 확장할 수 있는 플러그인을 제공하지만, 그 범위는 상대적으로 제한적이다. 목적 iTerm2는 주로 터미널 기반의 작업을 위해 사용된다. 반면에 VS Code는 통합 개발 환경으로서, 코드 편집, 디버깅, 버전 관리 등 다양한 개발 작업이 가능하다. 즉, iTerm2는 터미널 작업에 특화된 터미널 에뮬레이터로, VS Code는 강력한 통합 개발 환경으로서 다양한 개발 작업을 지원한다. 개발자의 작업 성격과 개인적인 기호에 따라 선택이 달라진다.\n개발 환경은 회사마다, 개인마다 각각 다르기 때문에 정답은 없다고 생각한다. (세상에는 수많은 IDE들이 존재하고 개발되고 있으니까,,)\n지금은 VSCode을 사용하여 주로 작업을 하고 있지만, 다른 IDE를 사용해야 하는 상황이 생길 수도 있다. 또한 리눅스를 공부할 생각이기 때문에 터미널에서 작업하는 방법도 익혀두어야겠다.\n"
},
{
  "permalink": "http://localhost:1313/tags/tool/",
  "title": "Tool",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/tags/ajax/",
  "title": "Ajax",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2023-06-19-difference-between-form-and-ajax/",
  "title": "Form과 Ajax 차이를 알자",
  "tags": ["2023", "ajax"],
  "description": "Form과 AJAX의 차이점을 이해해야 한다.",
  "contents": "웹 개발에서 form과 Ajax는 사용자와 상호작용하고 데이터를 전송하는 데 중요한 요소이다. 그러나 이러한 방법들을 제대로 이해하지 못하고 개발하는 것은 문제와 위험성을 야기할 수 있다.\n기존의 프로젝트를 마무리하면서 다른 프로젝트를 지원하고 있는데, 두 가지 방법에 대한 이해도가 조금 미흡해서 곤란할 뻔한 적이 있었다. 어떻게 기본을 모를 수가 있을까 하고 부끄러웠지만, 이번 일로 두 가지 방법에 대하여 제대로 이해할 수 있었다.\n따라서 form과 Ajax의 차이점과 각각의 사용법을 명확하게 이해하고 적절하게 활용하는 방법에 대해 알아보려 한다.\n하지만 작동했죠? 기존 프로젝트를 마무리하면서 다른 프로젝트를 지원하고 있는데, 검색 및 조회 페이지를 개발 중 문제에 직면했다.\n개발해야 할 기능은 검색 조건을 입력한 후 버튼을 누르면 DB에서 해당 조건을 필터링하여 웹 화면에 출력하는 것이었다. 처음에는 Ajax를 사용하여 검색 기능을 구현하려고 했지만, Ajax에 대한 이해도가 부족하여 문제가 발생했다.\n실제로는 Ajax로 코드를 작성한 줄 알았지만, 내용을 다시 확인해 보니 실수가 있었다. form을 사용하여 검색할 때마다 전체 데이터를 가져오는 방식으로 코드를 작성했던 것이다.\n이는 검색 버튼을 클릭할 때마다 페이지 전체가 새로고침되고, 서버로부터 전체 데이터를 받아오는 방식이었다. 이로 인해 데이터 양이 증가할수록 성능 문제와 느린 응답 시간이 발생하여 사용자 경험이 저하되었고, 서버에 부하가 커지는 문제가 발생했다.\n문제를 해결하기 위해 코드를 수정하여 Form을 사용하여 원하는 필터 조건에 따라 데이터를 불러오도록 개선했다.\nForm과 Ajax 차이점 Form Form은 전체 페이지를 새로고침하거나 이동하는 방식으로 데이터를 전송하고 업데이트한다. 사용자가 데이터를 입력한 후 Submit 버튼을 클릭하거나 Enter 키를 누르면 데이터가 서버로 전송된다. 서버는 전송된 데이터를 받아 처리하고, 그에 따른 결과를 다시 웹 페이지로 반환한다. Ajax Ajax는 웹 페이지의 일부분만을 업데이트하기 위해 비동기적으로 서버와 데이터를 교환하는 기술이다. 서버는 해당 요청을 처리하고 필요한 데이터만을 반환하여, 웹 페이지에서 동적으로 업데이트할 수 있게 된다. 이를 통해 웹 페이지는 더 나은 사용자 경험과 빠른 응답 속도를 제공할 수 있다. Form과 Ajax를 적절히 사용해야하는 이유 효율적인 데이터 처리 Form은 데이터 양이 많을 경우, 불필요한 데이터까지 전송되어 서버 리소스를 낭비하게 된다. Ajax는 필요한 데이터만을 선택적으로 받아올 수 있기 때문에, 데이터 양이 많을 때도 필터링 조건을 서버에 전달하여 원하는 값들만을 효율적으로 조회할 수 있다. 웹 페이지의 반응성 Form은 페이지를 다시 로드하는 시간이 소요되기 때문에, 데이터 양이 많을 경우, 페이지 로딩 시간이 길어져 사용자 경험에 부정적인 영향을 줄 수 있다. Ajax를 사용하면 페이지 전체를 새로 고치지 않고도 필요한 부분만 동적으로 갱신할 수 있기 때문에, 페이지 로딩 시간을 대기하지 않고 다른 작업을 계속할 수 있어 사용성과 사용자 경험을 향상시킬 수 있다. 이번 이슈를 통해 Form과 Ajax에 대한 이해와 적용 방법을 제대로 알게 되었으며, 이로 인해 더 나은 웹 애플리케이션을 개발할 수 있게 되었다.\n앞으로도 계속해서 학습하고 개발 노력을 기울여서 Form과 Ajax를 비롯한 다양한 웹 개발 기술에 능숙해지도록 노력해야겠다.\n"
},
{
  "permalink": "http://localhost:1313/post/2023-06-07-if-no-data-from-project/",
  "title": "데이터: ㅇㅇ없어줄게",
  "tags": ["2023", "data", "issue"],
  "description": "프로젝트에 사용 가능한 데이터가 없는 경우",
  "contents": "프로젝트를 진행할 때 중요한 요소 중 하나는 충분한 데이터를 확보하는 것이다. 그러나 현실적인 이유로 인해 프로젝트를 위한 충분한 데이터를 확보하기 어려운 상황이 발생할 수 있다.\n일단은 가데이터를 작성하는 방법으로 진행했지만 가데이터를 작성하는 작업은 예상보다 번거로웠다. (필요한 데이터가 너무 많아요…)\n따라서 데이터 부족으로 인해 직면한 어려움과 이를 해결하기 위한 개선 방안에 대해 알아보려 한다.\n나만 데이터 없어 기존에 진행되던 프로젝트가 마무리될 때쯤, 현재 개발한 UI가 아닌 자체적으로 회의를 통해 결정된 새로운 UI를 개발해야 한다는 말을 들었다. 열심히 애정을 갖고 만든 UI를 사용하지 않는다는 것에 조금은 속상했지만, 새로운 계약을 진행하는 것이니까 긍정적으로 생각하고 개발을 진행했다.\n이미 완성된 2개의 페이지를 합친 느낌이라서 전과 비슷한 데이터 구조였지만 새로 필요한 데이터들이 있었다.\n원래 DB에 데이터를 저장하는 방법은 미리 짜놓은 CLI 프로그램으로 데이터를 수집하는 것이었다. 그러나 언제부터인가 데이터가 제대로 집계되지 않았고, 클라이언트한테 물어보니 내부 사정으로 특정 데이터는 당분간 집계가 어렵다는 말을 했다.\n그래서 우선적으로 집계가 되는 데이터만 사용하고 나머지는 가데이터를 작성하는 방향으로 진행하게 되었다.\n“이 방법이 최선이었을까..?” 새로운 UI 개발에 필요한 데이터의 양이 많았기 때문에 하나씩 일일히 SQL 쿼리문으로 가데이터를 작성하기에는 너무 번거로웠다.\n특히, 시간에 따라 변하는 패턴을 고려하여 가데이터를 월별, 일별, 주별로 나누어 작성해야 하다는 것과, 작년과 올해의 데이터를 비교하고 이를 기반으로 한 가상의 데이터를 만들기 위해서는 많은 계산과 분석이 필요했기 때문에 일일히 수작업으로 한다는 것은 말도 안 됐다.\n따라서 이 부분을 해결하기 위해 고민한 결과 헨더슨 테이블을 사용해서 DB에 저장된 데이터를 검색 및 조회할 수 있는 페이지에서 버튼을 추가하는 것이었다.\n추가한 버튼의 이벤트는 총 2가지로, 우선 조회한 테이블에서 스크롤 한 날짜의 데이터들 또는 선택된 기간과 카테고리의 모든 데이터들을 엑셀 파일로 저장하는 이벤트와 DB 구조와 같은 형식의 테이블을 가진 엑셀 파일을 업로드하여 DB를 업데이트하는 이벤트이다.\n처음에는 엑셀 파일을 가지고 가데이터를 생성 및 수정할 수 있어서 굉장히 편했다. 하지만 데이터들의 증감치나 비율들에 대한 변화가 보여져야하기 때문에 모든 데이터를 같은 값으로 설정할 수 없고, 소수점 또는 숫자의 자릿수까지 신경써여 해서 머리가 조금 복잡해졌다.\n지금 생각해 보면 가데이터인데 이렇게까지 세심하고 완벽하게 작성하려고 해야만 했을까 하는 생각이 든다.\n그냥.. 그렇다고..\n"
},
{
  "permalink": "http://localhost:1313/tags/log/",
  "title": "Log",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2023-05-27-error-check-is-mandatory/",
  "title": "에러체크 딱딱딱",
  "tags": ["2023", "log", "issue"],
  "description": "오류 검사는 필수 사항",
  "contents": "코드를 작성하다 보면 밥 먹듯이 에러가 발생하지만, 원인 모를 에러를 마주치면 하루 종일 또는 그 이상이 걸려도 해결하지 못할 때가 있다. 만약 에러를 제대로 체크하지 않는다면 정말 간단한 에러를 해결하지 못하고 시간 낭비할 수 있다. (그게… 접니다?)\n항상 대표님이 에러 로그를 확인하라고 강조하셨는데, 아직 익숙지 않아서 별거 아닌 에러에 삽질하는 상황이 자주 일어났다.\n따라서 이러한 실수를 줄이기 위해 에러 조치를 어떻게 하면 잘할 수 있을지에 대해 알아보려 한다.\n내가 생각하는 에러 조치 순서 에러를 조치하는 방법과 순서는 다양하지만 내가 생각하는 방법은 다음과 같다.\n로그 확인 로그를 복사하여 ChatGPT한테 물어보기 전문가에게 도움 요청하기 삽질하기 삽질하기는 GPT에게 물어보면서 계속 코드 수정 반복하기와 에러 발생 부분 중간중간에 log를 삽입하여 찍어보기로 나누어진다.\n우선 부끄럽지만 놀랍게도 최근까지 나는 로그를 잘 확인하지 않았다. ‘로그를 안 보고 해결할 수 있다.’ 라는 근자감이 아니라 로그를 봐도 와 이거 심각한 상황이다를 연상케하는 문장들이 와르르 쏟아지니까 겁을 먹을 수밖에 없었다.\n이제는 Chrome devtools의 로그를 확인하고 Sources 탭을 이용하여 코드 중단점을 설정하거나, 변수 값을 확인하는 것에 익숙해져 있다.\n위 방법은 JavaScript에서 에러가 발생한 상황이고 파이썬 소스에서 에러가 발생하면 서버에서 로그를 확인하고 조치를 취해야 한다.\n나는 파이썬에서 에러가 발생하면 1–2–4–4–4–3 순으로 조치를 취한다. 로그에서 에러가 발생한 소스 위치를 알려주기 때문에 파악하는 것은 어렵지 않다. (‘파악하는 것\u0026rsquo;은 어렵지 않다…)\n로그에는 Level이 있다 로그 레벨(Log Level) 은 프로그램 또는 애플리케이션에서 로그 메시지의 중요도와 유형을 나타내는데 사용되는 단계를 의미한다.\nDEBUG: 가장 낮은 로그 레벨로, 디버깅 목적으로 사용한다. INFO: 프로그램의 주요 이벤트를 기록한다. WARNING: 경고 메시지로, 애플리케이션의 정상적인 동작은 보존되지만 잠재적인 문제를 나타낸다. ERROR: 오류 메시지로, 애플리케이션이 기능을 제대로 수행하지 못하거나 중대한 문제가 발생한 경우 기록된다. FATAL (CRITICAL): 가장 높은 로그 레벨로, 치명적인 오류나 심각한 장애 상황을 나타낸다. TRACE: 디버그보다 더 상세한 추적 정보를 기록하며, 주로 디버깅 목적으로 사용된다. 로깅 시스템은 일반적으로 로그 레벨에 따라 설정할 수 있다. 예를 들어 개발 환경에서는 모든 로그 레벨을 활성화하여 디버깅에 유용한 정보를 얻을 수 있다.\n또한 운영 환경에서는 ERROR 또는 그 이상의 레벨만 활성화하여 중요한 이벤트 및 문제 상황을 기록할 수 있다.\n로그 레벨은 로그 메시지의 중요도와 심각성을 나타내므로, 올바른 로그 레벨을 선택하고 설정해야 애플리케이션의 동작을 모니터링하고 문제를 해결하는 데 도움을 줄 수 있다.\n에러를 체크하는 것은 개발자로서 기본이라는 생각이 든다. 에러를 놓치면 예상치 못한 결과와 심각한 문제를 초래할 수 있기 때문이다.\n로그를 분석하기 위해서는 우선 로그를 잘 찍는 습관을 들여야 한다고 생각한다. 사소한 것이라도 로그를 찍어가면서 어디서 에러가 나는지, 값이 잘 전달되는지 파악해야 한다.\n"
},
{
  "permalink": "http://localhost:1313/post/2023-05-14-importace-of-business-understanding/",
  "title": "업무이해도의 중요성",
  "tags": ["2023", "issue"],
  "description": "업무 이해도의 중요성을 배운 이슈",
  "contents": "프로젝트를 진행할 때 업무 이해도는 매우 중요하다.\n개발자는 개발만 잘하면 되는 거 아니냐라는 생각을 할 수 있지만, 본인이 개발을 할 프로젝트를 파악하지 못하고 클라이언트의 요구대로 완성시킨다는 건 불가능한 일이다.\n업무 이해도가 낮으면 겪는 일 내가 제일 어려움을 느낀 부분은 데이터를 계산하는 부분이다. 아무래도 각 구분 기준에 따라 데이터의 증감치를 보여주는 표나 그래프가 많기 때문에 계산식에 대한 이해가 필요했다.\n데이터가 집계될 때 각 시간대 별로 누적되기 때문에 일자별 데이터는 해당 일의 24시 기준으로 저장되고, 월 데이터는 해당 월의 마지막 날 24시 기준으로 저장된다. 만약 오늘 기준 이번 달 데이터를 구하고 싶다면 오늘 데이터에서 지난달 데이터를 빼줘야 한다.\n위 사진처럼 데이터가 누적되어 저장되는 부분에 이해도가 떨어져서 데이터를 계산하는 코드를 매일 확인하고 수정하고를 반복하고 있었는데 예상치도 못한 곳에서 헤매게 되었다.\n우선 주간 누계를 계산하고 증감치를 계산하는 부분에서 지난주와 지지난 주를 비교하는 건지 지난주와 오늘을 비교하는 건지 기준이 애매했다. 또한, 지난주의 기준이 오늘 기준으로 지난주 월요일부터 일요일인지, 지난주의 오늘 요일까지인지 헷갈리기 시작했다.\n분명히 대표님이 2번이나 설명해 주셨는데 이해가 되지 않는다는 것에 살짝 민망하면서 내가 멍청한가 하는 생각도 들고, 다시 여쭤보면 혼나지 않을까 하는 걱정이 들었다. 다행히 이 프로젝트를 잠깐 도와주셨던 선임분께 여쭤보고 서로 머리를 맞대면서 고민한 후에 나온 해결책으로 수정했다.\n그리고 대표님한테 코드 리뷰를 받으러 갔는데 다행히 데이터도 잘 맞고 이상 없다고 하셨다. 항상 업무 이해도가 중요하다는 얘기를 많이 들었는데 대충 이 정도면 되겠지 했던 나를 반성하게 되었다.\n지금은 해결이 돼서 다행이지만, 조금 더 침착하고 천천히 이해하고 코드를 처리했다면 더 빨리 해결되지 않았을까 하는 생각이 든다.\n성격상 눈치도 살짝 보고 질문을 잘 못하지만 답답하게 있는 것보다는 한번 시원하게 잔소리 듣고 이해하는 것이 백번 나아 보인다. (무조건 고쳐야 한다..!)\n"
},
{
  "permalink": "http://localhost:1313/tags/plotly/",
  "title": "Plotly",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2023-05-09-making-variety-of-graphs/",
  "title": "그래프 좋아하세요?",
  "tags": ["2023", "plotly", "issue"],
  "description": "다양한 그래프 만들어야 하는 이슈",
  "contents": "프로그래밍을 하다 보면 그래프를 작성해야 하는 상황이 많다. 학생 때 수학 문제를 풀다가 그래프가 나오는 문제가 있으면 완전 땡큐였는데, 프로그래밍에서 그래프를 만나면 그 정도는 아닌 것 같다.\n그래프는 데이터를 시각적으로 표현하는데 수학적 함수, 수치 데이터, 통계 자료 등을 포함하여 다양한 유형의 데이터를 시각적으로 나타낼 수 있기 때문에 그래프를 사용하여 데이터의 관계와 추세를 분석할 수 있다.\n하지만 종류가 매우 다양하기 때문에 적절한 선택이 필요하다. (많은 건 좋은데 애매하게 많다면..?)\nPlotly.js 사용하기 Plotly.js는 오픈 소스 데이터 시각화 라이브러리로 다양한 차트 유형(선 그래프, 막대그래프, 히스토그램, 산점도 등)을 지원하며, 인터랙티브한 기능(툴팁, 축 슬라이더, 드래그 및 드롭, 축 교환 등)을 포함한다.\n또한 오픈 소스로 제공되며, 사용 가능한 소스 코드와 예제를 찾을 수 있고, Plotly.js를 사용하면 매우 활발한 개발자 커뮤니티와 지원을 받을 수 있다. 이러한 이점 때문에 데이터 시각화를 위한 오픈 소스 라이브러리 중에서 인기가 매우 높다고 한다. (개발자 친화적인 게 최고야…)\n내가 사용한 그래프는 막대 + 꺾은선 그래프와 히트맵이다. 막대 + 꺾은선 그래프는 가장 많이 쓰는 그래프기 때문에 무난하게 어려움 없이 코딩할 수 있었다. x 값과 y 값은 서버로부터 가져온 데이터를 filter 해서 각각 넣어주었는데 세부적인 설정은 공식 문서를 참고했다.\n히트맵(heatmap)은 데이터를 시각화하는 기법 중 하나로, 색상을 사용하여 값의 상대적인 크기를 나타내는 그래프를 말한다. 주로 2차원 배열로 표시되며, 각 요소는 값에 따라 색상으로 나타내어진다.\n이를 통해 데이터의 분포와 패턴을 쉽게 파악할 수 있다. 나는 축구를 좋아하기 때문에 히트맵이 익숙했고, 그 분야에 사용될 줄 알았는데 지리 정보 시스템(GIS)이나 시장 세분화, 빅데이터 분석 등 다양한 분야에 사용된다고 한다.\n히트맵 기준 값을 나누고 각 기준값에 따른 색상을 Hex 값으로 설정했는데 입력한 Hex 값과 전혀 다른 색이 나와서 조금 헤맸다.\nGauge.js 사용하기 Gauge.js는 JavaScript를 사용하여 생성된 동적으로 그려지는 게이지 또는 메터를 구현하는 데 사용되는 오픈 소스 라이브러리로 여러 가지 다른 종류의 게이지를 지원하며, 쉽게 사용할 수 있는 API를 제공한다.\n또한 많은 사용자 지정 설정을 제공하여 디자인 및 기능을 개별적으로 조정할 수 있다. Plotly.js와 마찬가지로 오픈 소스이므로 누구나 무료로 사용할 수 있다는 장점이 있다. (게이지 전문 맛집이구먼…)\n코드는 생각보다 복잡하지 않아서 다행이었지만 적용했을 때 화면 UI 부분에서 크기나 비율이 틀어지는 경우가 발생해서 수정하느라 힘들었다. Plotly.js로 다 작성하려 했지만 마음에 드는 UI나 기능이 없어서 Guage.js를 사용하게 되었는데 무난하게 사용하기에는 좋았다.\n레이아웃(Layout)이 뭔지 몰라서 그래프를 디자인하는 부분에 있어서 버벅였던 것 같다. 레이아웃은 디자인의 기본적인 개념으로, 컨텐츠의 배치와 구조를 결정하는 요소이며, 디자인의 시각적인 요소를 결정한다는데.. 예술적 감각이 없는 나로서는..\n그래프를 만들다 보니 그래프를 사용한 웹 페이지나 작은 프로젝트의 주제들이 몇 개 떠올라서 쉬는 날에 도전해 볼 생각이다.\n"
},
{
  "permalink": "http://localhost:1313/post/2023-05-05-retrieve-desired-data-from-database/",
  "title": "싱글벙글(?) 쿼리문 체험기",
  "tags": ["2023", "database", "issue"],
  "description": "데이터베이스에서 원하는 데이터 검색 이슈",
  "contents": "데이터베이스에는 프로젝트에 필요한 모든 데이터들이 존재한다. 저장된 데이터들을 그대로 사용하는 경우도 있고 필요한 컬럼들을 가져오거나 데이터를 합치거나 다양하게 수정해서 원하는 데이터로 변환한 후 사용한다.\n이것이 바로 내가 백엔드 개발자로 진로를 정한 이유 중 하나였는데, 지금까지 CRUD 쿼리문을 사용하고 테이블에 저장된 컬럼들을 가져오는 것만 경험해 봤기 때문에 데이터 쪽을 너무 쉽게 생각하고 있었다. (어떤 프로젝트든 한 가지 테이블만 사용하는 경우는 없으니까..)\n무수히 이어진 SQL 쿼리문 처음 백엔드 쪽 파이썬 코드를 봤을 때 당황스러웠다.\n특정 함수의 stmt 변수에 SQL 쿼리문이 담겨 있고, 해당 쿼리를 실행하여 결괏값을 변수에 저장하는 Python 코드들이었는데 우선 SQL 쿼리문 부터 굉장히 길고 복잡해 보였다.\n아래는 Python 코드 중 대시보드를 조회하는 쿼리문의 구조를 나타낸 코드이다.\nSELECT type, IFNULL(group2, \u0026#39;전체\u0026#39;) AS group2, cycle, b_date, AVG(column6) AS avg_column6, AVG(column7) AS avg_column7, SUM(column8) AS sum_column8, SUM(column9) AS sum_column9 FROM table_name WHERE type = \u0026#39;타입이름 1\u0026#39; AND ( b_date = \u0026#39;%s\u0026#39; OR ( b_date BETWEEN DATE_FORMAT( LAST_DAY( DATE_SUB(\u0026#39;%s\u0026#39;, INTERVAL 1 MONTH) ), \u0026#39;%Y-%m-01\u0026#39; ) AND LAST_DAY( DATE_SUB(\u0026#39;%s\u0026#39;, INTERVAL 1 MONTH) ) ) ) GROUP BY type, group2, cycle, b_date; 위 쿼리문은 다음과 같은 기능을 수행한다. table_name 테이블에서 type을 \u0026lsquo;타입이름 1\u0026lsquo;로 설정하고, group2 값이 비어있으면 \u0026lsquo;전체\u0026lsquo;로 대체하며, 특정 날짜 범위와 \u0026lsquo;cycle 이름\u0026lsquo;을 충족하는 데이터를 추출한다.\n두 부분의 데이터 추출을 하나로 결합한다. 첫 번째 부분은 b_date를 입력 날짜(\u0026rsquo;%s\u0026rsquo;)와 비교하고, 두 번째 부분은 입력 날짜의 전 월의 마지막 날부터 전 월의 첫 날까지의 범위를 검색한다.\n각 type에 대해 b_date를 형식화하고 \u0026lsquo;컬럼 6\u0026rsquo; 및 \u0026lsquo;컬럼 7\u0026lsquo;의 평균, 그리고 \u0026lsquo;컬럼 8\u0026rsquo; 및 \u0026lsquo;컬럼 9\u0026lsquo;의 합계를 계산한다.\n최종 결과 집합에 type, group1, group2, cycle, b_date, 계산된 평균 및 합계 값들을 포함하여 결과를 반환한다.\nPython 코드를 보고 나도 모르게 감탄해버렸다.\n출근하고 일을 배우면서 이런 경우가 2번이 있었는데, 첫 번째는 지저분하고 나열되어 있는 코드를 함수를 사용해서 깔끔하게 분리하는 리팩토링을 했을 때였고, 두 번째는 위 쿼리문을 보고 SQL에 직접 입력해서 데이터를 조회했을 때다.\n깔끔하게 코드를 분리하여 가독성을 높이는 부분은 어느 정도 할 수 있지만 쿼리문은 많은 공부가 필요할 것 같다.\n단순하게 생각하면 \u0026lsquo;SQL 쿼리문을 실행하여 결과 값을 변수에 저장한 후, json_data의 값을 기반으로 데이터베이스에서 쿼리를 실행하여 결과를 반환한다.’ 라고 할 수 있다. SQL 문법을 정확히 이해하고 사용할 줄 알아야 원하는 데이터를 가져올 수 있고, 그래야 결과를 반환하기 위한 파이썬 코드를 구현할 수 있을 것 같다. (넓게는 2가지 부족한 부분을 채워야 하고 구체적으로 들어가면…)\n매일매일 부족한 부분을 발견하면서 해야 할 공부가 쌓여가는데, 배우는 내용도 많아지고 있다. 특히 DB는 내가 좋아한다고만 하고 제대로 공부해 보려 하지 않았기 때문에 더 어렵다고 느껴진다.\n이제라도 중요하다는 것을 깨달아서 다행이라고 생각하고 조금 더 비중을 두고 공부해야겠다. 그래야지 나에게 데이터 처리 코드나 데이터베이스 코드를 코딩할 기회가 생길 수 있을 것 같다.\n아니면 그냥.. ‘제가 해볼게요’라고 할까..??\n"
},
{
  "permalink": "http://localhost:1313/post/2023-05-01-minimize-ajax-requests/",
  "title": "ajax 요청을 최소화하자",
  "tags": ["2023", "ajax", "issue"],
  "description": "ajax 요청 최소화를 고려하지 않아서 생긴 이슈",
  "contents": "Ajax는 Asynchronous JavaScript and XML의 약자로, 웹 페이지에서 서버와 비동기적으로 데이터를 교환하면서 웹 페이지를 동적으로 업데이트하는 기술이다. Ajax를 사용하면 페이지 이동 없이도 필요한 부분만 업데이트할 수 있으므로 UX를 개선할 수 있다.\nDashboard를 만들 때 많은 데이터를 가지고 계산하고 출력해야 하므로 각각의 위치마다 같은 데이터를 사용하는 경우도 있고, 다른 데이터를 가져와야 하는 경우도 있었다.\nAjax에 대해 제대로 이해하지 못해서 같은 데이터를 사용하지만 위치가 다르다고는 이유로 계속해서 Ajax 요청을 하고 있었던 것이다. (서버야 버텨줘..!!)\n한 번에 가져오기 vs 나누어 가져오기 데이터를 가져올 때는 상황에 따라 적절한 방식을 선택하는 것이 중요하다.\n내가 지금까지 짠 코드는 막 가져오기였다.. 공부를 하면서 알게 된 내용을 간략하게 정리해 봤다.\n전체 데이터를 가져와서 각 위치에 업데이트하는 방식 장점 한 번의 요청으로 모든 데이터를 가져올 수 있어서 네트워크 부하를 줄일 수 있다. 또한, 데이터가 모두 로드된 이후에는 사용자 경험을 향상시킬 수 있다. 단점 모든 데이터를 가져오기 때문에 서버에 부담이 가거나, 클라이언트의 메모리를 많이 차지할 수 있다. 또한, 데이터가 계속 업데이트되면 사용자는 일정한 주기로 새로고침을 해야 한다. 각 위치마다 필요한 데이터를 각각 가져와서 업데이트하는 방식 장점 필요한 데이터만 가져오기 때문에 데이터를 가져오는 데 드는 시간이 줄어들어 성능이 향상될 수 있다. 또한, 데이터가 자주 업데이트될 때 더 빠른 업데이트를 제공할 수 있다. 단점 각 위치마다 데이터를 가져와야 하기 때문에 요청 수가 많아질 수 있다. 이는 서버 부하와 네트워크 부하를 유발할 수 있습니다. 또한, 사용자 경험이 좋지 않을 수 있다. 전체 데이터가 크고 자주 업데이트되지 않는 경우에는 전체 데이터를 가져와서 업데이트하는 방식이 적절할 수 있고, 데이터가 작고 자주 업데이트되는 경우에는 각 위치마다 필요한 데이터를 가져와서 업데이트하는 방식이 적절할 수 있다.\n이제는 잘할 수 있다 처음에는 무슨 차이가 있을까라는 생각이 들었지만 불필요한 코드를 최소할 수 있고, 서버에 주는 부담을 최소화할 수 있다는 것을 알았다. 단순하게 생각해봤을 때 Ajax 요청으로 필요한 데이터를 가져왔는데 왜 또 가져오려 했을까..??\n또한 데이터의 한 가지 컬럼 값에 따라 나누어서 가져와야 하는 경우 (ex. 모든 데이터 값을 월별, 일별, 시간별로 나누어서 가져와야 할 때)\n위와 같은 경우에도 계속해서 Ajax 요청을 했었는데 이제는 한번 요청할 때 각각 분리해서 가져오도록 코드를 수정했다.\n정답이 정해져 있는 것은 아니기 때문에 적절한 상황에 맞춰 Ajax 요청을 최소화해야 한다는 것을 배웠다.\n프로그래밍은 무조건 적인 해답이 정해져 있지 않고 상황에 따른 다양한 해결 방식들이 많기 때문에 전부 다 알지는 못해도 어느 정도 이해는 필요할 것 같다.\n"
},
{
  "permalink": "http://localhost:1313/post/2023-04-28-breaking-thinking-simply/",
  "title": "유연한 사고, 단순하지 않기",
  "tags": ["2023", "issue"],
  "description": "코드를 짤 때 가독성을 고려하지 않아서 생긴 이슈",
  "contents": "어느 날 개발자는 항상 모든 일에 생각을 해야 한다는 말을 들었다.\n코드 한 줄을 짤 때에도 단순하게 ‘이렇게 하면 되겠지?’ 하고 바로 완성하는 게 아니라 어떻게 해야 더 간단하고 가독성이 높은 코드로 완성할 수 있을까에 대한 생각을 해야 한다.\n다른 주니어 개발자들은 어떤지 모르겠지만 나는 단순하게 코드를 완성하고 잘 작동이 되면 더 이상 신경을 쓰지 않았다. 처음에는 에러만 안 나면 상관없겠지라는 생각이었지만, 점점 코드가 많아지면 많아질수록 가독성이나 효율적인 부분에서 떨어지게 된다는 것을 알았다.\n길다고 다 좋은 건 아니다 처음 코드를 공부할 때 알고리즘에 흥미를 느껴서 매일 2–3문제씩 도전해 본 적이 있다.\n조금 어려운 문제를 해결할 때에는 코드가 좀 길게 완성될 때가 있었는데, 당시에는 테스트를 통과하는 목적만 달성되면 된다라고 생각하고 단순하게 테스트 통과만 신경을 썼었다.\n다른 사람들의 문제풀이를 볼 수 있어서 살짝 구경해 볼까 하고 들어가 봤는데 신선한 충격을 받았다. 1시간 동안 머리 쥐어짜서 10줄 넘게 작성되어 있는 내 코드를 보다가 4줄도 안되는 코드를 봤을 때의 기분이란..\n프로젝트에 실제 사용되는 코드랑 알고리즘이랑은 연관되어 있는 듯 없는 듯 아직 내가 판단하기에는 애매하기 때문에 좋은 예시라고 할 수는 없다. (그래도 공감..해줘)\n항상 일정 부분 개발을 완료하거나 이슈사항이 생기면 대표님과 함께 동료검토를 한다. 그러면서 코드 리뷰도 하는 경우도 있는데 한번은 if ~ else 문이 범벅이거나 계속 코드를 나열해가면서 데이터를 필터링하는 내 코드를 for 문으로 간략하게 리팩토링을 해주셨다.\n수정 전 예시 function processData(data) { let result = \u0026#39;\u0026#39;; if (data === \u0026#39;A\u0026#39;) { result = \u0026#39;Apple\u0026#39;; } else if (data === \u0026#39;B\u0026#39;) { result = \u0026#39;Banana\u0026#39;; } else if (data === \u0026#39;C\u0026#39;) { result = \u0026#39;Cherry\u0026#39;; } else if (data === \u0026#39;D\u0026#39;) { result = \u0026#39;Date\u0026#39;; } else if (data === \u0026#39;E\u0026#39;) { result = \u0026#39;Elderberry\u0026#39;; } else { result = \u0026#39;Unknown\u0026#39;; } return result; } 수정 후 예시 // for 문을 사용한 코드 function processData(data) { const dataMap = { \u0026#39;A\u0026#39;: \u0026#39;Apple\u0026#39;, \u0026#39;B\u0026#39;: \u0026#39;Banana\u0026#39;, \u0026#39;C\u0026#39;: \u0026#39;Cherry\u0026#39;, \u0026#39;D\u0026#39;: \u0026#39;Date\u0026#39;, \u0026#39;E\u0026#39;: \u0026#39;Elderberry\u0026#39; }; let result = \u0026#39;Unknown\u0026#39;; for (const key in dataMap) { if (data === key) { result = dataMap[key]; break; } } return result; } 확실히 가독성도 높아지고 간단해보인다.\n코드는 사람에 따라서 다르게 짜일 수 있기 때문에 재밌는 것 같다. 어디선가 ‘컴퓨터가 이해할 수 있는 코드는 누구나 짤 수 있고, 좋은 프로그래머는 사람이 이해할 수 있는 코드를 짠다.’는 문구를 본 적이 있다.\n항상 다양하게 생각하는 습관을 가져서 리팩토링뿐만 아니라 개발하는 데에 있어 좋은 프로그래머가 되고 싶다.\n"
},
{
  "permalink": "http://localhost:1313/tags/bootstrap/",
  "title": "Bootstrap",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2023-04-26-made-table-with-bootstrap/",
  "title": "하루종일 테이블 만들기(with Bootstrap)",
  "tags": ["2023", "bootstrap"],
  "description": "부트스트랩을 사용해서 테이블 만든 후기",
  "contents": "기존 웹 페이지에 있던 테이블의 UI를 수정해야 하는 작업을 요청받았다. 이전 테이블은 테이블의 크기나 폰트가 작아서 잘 보이지 않아 불편하다는 이유였다.\n처음 웹 페이지에 접속했을 때부터 수정했으면 좋겠다는 생각이 들었는데 이런 기회가..?? 입꼬리를 싸악 올리면서 도전해 보았다.\n하지만 부트스트랩을 사용해 본 적이 없어 조금 난감했다.\n부트스트랩이랑 친해지기 나는 부트스트랩을 반응형 웹 디자인을 지원하는 프론트 엔드 개발 프레임워크라고만 알고 있었다. 부트스트랩은 기본적으로 제공되는 스타일링, 레이아웃, 그리드 시스템, 폼 등의 디자인을 사용하여 웹 페이지를 구성할 수 있다고 한다.\n기존 테이블도 부트스트랩을 사용했기 때문에 수정하기 전에 코드 리뷰를 살짝 해보았다. 코드를 보고 3초 만에 든 생각은 div 태그가 진짜 많고.. 많고.. 많다?? HTML에서 div 태그는 다른 요소들을 그룹화하거나 레이아웃을 만들기 위해 사용된다고 한다.\n이론상 ‘수많은 div 태그들로 그룹화하고 레이아웃을 만들면 된다’라고 나름 혼자서 간단하게 정의하고, 자신감이 생겨서 부트스트랩에서 기본적으로 제공되는 디자인을 사용하여 테이블을 만들기 시작했다. (일단 무조건 직진하는 편)\n그냥 나눠주면 안돼?? 테이블을 만들 때 가장 신경 쓴 부분은 주어진 공간에 쉽게 알아볼 수 있는 크기로 각 칸을 나누는 것이다. 부트스트랩의 그리드 시스템이 이 고민을 해결해 줄 수 있었다.\n12개의 열 시스템 어쩌구,, 6개의 기본 반응형 계층이 어쩌구,, 해서 모든 모양과 크기의 레이아웃을 빌드 할 수 있다고 하는데 이 그리드 시스템의 옵션이 6개가 있다고 한다. 나는 이 그리드 옵션 부분에서 시간을 많이 썼던 것 같다.\n전체 테이블 코드의 일부분에는 col, col-md, col-sm 라고 div class 안에 무언가 정의되어 있다. 느낌 상 col-md는 중간 크기이고, col-sm은 조금 작게 설정해 주는 것 같다.\ncol은 한 열의 너비를 설정해 주는데 \u0026lt;div class=\u0026quot;row\u0026quot;\u0026gt; 내부에 \u0026lt;div class=\u0026quot;col\u0026quot;\u0026gt; 를 여러 개 생성하면 그에 따라 row가 나눠진다. 나는 5개의 행과 4개의 열로 구성된 테이블을 만들어야 했는데 맨 왼쪽 열이 다른 열들에 비해 너비가 조금 좁아야 했다.\n(근데 왜 모두 균일하게 나눠지니..)\n위 사진은 완성된 테이블이다.\nChrome Devtools에 마진 값도 넣어보고,, 패딩 값도 수정해 보고,, 이것저것 시도하면서 영혼을 갈아 넣어서 결국 만족스러운 결과를 얻었다.\n"
},
{
  "permalink": "http://localhost:1313/tags/meeting/",
  "title": "Meeting",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2023-04-24-my-first-project-meeting/",
  "title": "처음으로 프로젝트 미팅에 참여하게 되는데..",
  "tags": ["2023", "meeting"],
  "description": "처음으로 프로젝트 미팅에 나간 후기",
  "contents": "프로젝트를 진행하려면 많은 과정을 거쳐야 한다.\n만약 내가 아이디어를 가지고 프로젝트를 진행하고 싶다면 같이 협업을 할 수 있게 다른 사람들을 설득할 수 있어야 하고, 프로젝트를 제안받은 경우에는 본인의 특정 기준에 따라 해당 프로젝트를 판단하여 진행할지 여부를 정할 것이다.\n항상 개인 프로젝트나 팀 단위 프로젝트만 진행했기 때문에 회사끼리 계약하는 단체 프로젝트는 굉장히 낯설고 신기했다.\n저는 왜 나가나요?? 입사한지 4일째가 되는 날 어느 정도 적응이 되어서 내 자리에 앉아 자바스크립트 소스를 수정하고 있었다. 그런데 갑자기 대표님이 회의 시간에 오후 2시쯤 다른 회사와 회의가 있어서 회의 준비를 해야 한다고 하셨다.\n나는 당연히 책임 분들이 가시는 것으로 예상 아니 확정이었고 나는 그저 ‘오늘 회의가 있구나~’ 정도로만 생각을 하고 점심 메뉴를 고민하고 있었다. 하지만 점심을 야무지게 먹고 배를 떵떵거리면서 자리에 앉아 다시 일을 시작해 볼까 하는 찰나에 대표님이 ‘승현씨도 회의같이 가지??’ 라고 하시는 것이었다.\n속으로는 ‘제가 가도 되나요 아니 저는 왜 나가나요?’ 라고 생각했지만 사회.. 생활이니까 빠르게 짐 챙기면서 ‘한번 가서 경험해 보고 싶습니다..’ (경험치 2배 이벤트인가..??)\n우여곡절 끝에 끌려.. 아니 참여한 회의는 시작되었고 나는 긴장을 엄청 하고 있었다. 처음에 인사를 나눌 때 다들 명함을 교환하면서 자기소개를 하고 있는데 나는 명함이 없어서 굉장히 민망했다.\n뭔가.. 소외된 느낌이랄까.. 얼른 인정받고 명함을 만들고 싶다는 생각이 들었다. 회의 시간에는 다이어리에 회의 내용을 정리하고 대화에 리액션 하느라 정신이 없었다. 대화 속도가 너무 빠르던데 다들 어떻게 메모하시는지..\n프로젝트에 대해 자세히 설명하고 나서 서로 세부 구성이라던가 개발 계획에 대한 대화를 할 때는 나도 이 대화에 참여하고 싶다는 생각이 들었다. 처음 듣는 용어들이 난무하고, 이해하기 어려운 말들이 많아서 벽이 느껴졌지만, 하나하나 메모해서 공부를 해야겠다고 생각했다.\n회의가 끝나고 주변에 최자로드에 나왔던 만두 맛집이 있어서 먹으러 갔다. 식사를 하면서 나에게 처음 회의를 참여했는데 어땠는지 물어보셨다.\n긴장도 많이 하고, 모르는 말들도 많이 나와서 당황스러웠고, 막상 내가 말을 했다가 계약에 흠이 될 수도 있다는 생각도 들어서 뭐 어쩌고 저쩌고~ 했는데 다들 똑같다면서 자기가 잘 아는 분야가 나오면 신나게 떠들다 오면 된다면서 훈훈하게 마무리했다.\n나중에 내가 주도할 수 있는 프로젝트를 맡게 되어서 회의를 참여하게 된다면 그때의 나는 어떨지 궁금해졌다.\n"
},
{
  "permalink": "http://localhost:1313/tags/first/",
  "title": "First",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2023-04-22-memoirs-of-first-month-employment/",
  "title": "자네는 누가 뽑았나?",
  "tags": ["2023", "first"],
  "description": "회사를 다니고 1개월차 회고록",
  "contents": "현재 나는 작은 IT 회사에서 프리랜서로 일을 하고 있다. 개발자를 진로로 정하고 공부를 시작한 지 6개월 정도 지났는데, 우연히 이런 좋은 기회가 찾아와서 즐겁게 다니고 있다.\n혼자 유튜브나 책 등으로 공부를 하다 보니 실력적으로 성장이 더디다는 생각이 들어 조금 낙담하고 있었는데, 이번 기회로 많은 성장을 할 수 있기를 기대한다.\n첫 실무 경험이기도 하고 회사를 다니면서 겪은 경험을 기록하고 공유하고 싶어 1–3개월 주기로 회고록을 써보려 한다.\n회의 시간에 주목 안 받는 방법 알려줄 사람 9시에 출근을 하고 나면 10시 회의를 준비해야 한다. 아직 막내기도 하고 맡은 프로젝트가 1개뿐이라 준비할 내용이 별로 없긴 한데, 그래도 현재 진행사항이나 에러 사항 등 기본적인 것은 체크하는 편이다.\n회의 주제는 날마다 다르지만 주로 각자 진행사항이나 이슈를 공유한다. 또는 새로운 프로젝트나 계약 건에 대해 대표님이 브리핑을 해주신다.\n내가 경험했던 회의들과 살짝 다른 점이 있다면, 바로 대표님의 역질문이다. 회의를 진행하시다가 갑자기 ‘지금까지 말한 내용을 이해한 대로 다 얘기해보세요’ 라는 질문을 자주 하신다.\n물론 회의에 열심히 참여한다면 대답하는 게 어렵지는 않다. 또한 질문에 대답을 하면서 다시 한번 이해를 할 수 있다는 점에서 개인적으로 긍정적인 반응이다. (그래도 나한테 질문하실까봐 눈을 피하는 편..)\n이게 실무 경험? 현재 나는 공장 별 전력/에너지 모니터링 프로젝트를 맡아서 개발을 하고 있다. 다양한 선택지가 있었지만 다 비슷비슷할 것이다라고 생각해서 아무거나 골랐는데 조금 스케일이 큰 프로젝트였다.\n그래도 지난 시간 동안 해왔던 공부들이 있기 때문에 자신감이 넘쳤지만 출근한지 하루 만에 모든 자신감이 사라져버렸다. 나는 그저 우물 안의 개구리였고, 그 우물 안에서 혼자 열심히 하고 있고, 많은 것을 알고 있다라고 착각하고 있었다는 걸 깨달았다.\nDevelop tool도 제대로 쓸 줄 모르면서, DB에 있는 데이터가 어떻게 웹으로 뿌려지는지도 제대로 모르면서 그냥 나 개발 좀 합니다! 이러고 있었다니… (코송합니다..)\n꽉 잡고 놓지 말자 누구에게나 기회는 찾아오고 그 기회를 잡아야지 발전하고 성장할 수 있다고 생각한다. 지금 회사를 만난 것이 내 인생의 터닝포인트라고 생각하고 어렵게 온 기회를 꽉 잡고 놓치지 않으려 한다.\n그냥 회사만 다닌다고 발전하고 성장할 수 있는 건 아니기 때문에 몇 가지 계획을 세우려 한다.\n1. 메모하는 습관 기르기 회사에 있는 시간에는 정말 다양한 정보들을 듣게 된다. 가만히 듣고 있으면 전혀 모르는 용어나 주제가 많아서 ‘그게 뭔데?’ 하고 넘어가는 경우가 많기 때문에 다이어리에 보고 듣는 모든 내용들을 적으려고 한다.\n다이어리에 적은 메모는 노션에 따로 모아서 저장한다. 구글링이나 Chat GPT에게 물어보면서 이해하고 정리를 하면 나중에 알아보기 편할 것 같아서 시작하게 되었다. (Chat GPT야 도와줘~)\n2. 자투리 시간 활용하기 평일에 퇴근하고 집에 와서 사용할 수 있는 자투리 시간은 보통 2–3시간 정도 된다. 이 시간들은 오로지 나를 위해서 쓰고 싶다는 생각이 들어서 책을 읽거나 토이 프로젝트를 해보고 싶다는 생각이 들었다.\n책을 좋아하는 편은 아니지만, 유튜브 short나 인스타 릴스를 보는 것보다는 낫지 않을까 하는 생각으로 ‘커리어 스킬’이라는 책을 샀다. 이제 읽기 시작했지만 하루 종일 영어랑 숫자만 보다가 한글을 보니까 조금 힐링 되는 느낌이 든다.\n토이 프로젝트는 전부터 진행하고 싶다는 생각만 하고 흐지부지되었기 때문에 이번 기회에 도전해 보려 한다. 우선 기본적이고 많은 사람들이 만들었던 프로젝트부터 하고 난 다음 나만의 주제를 정해서 도전해보고 싶다.\n지금 개발을 python과 flask로 하고 있는데 FastAPI도 써보고 싶고, Java와 SpringBoot로 만들어보고 싶다는 생각이 든다. 실력에 비해 욕심이 과한 편이기 때문에, 정신 차리고 지금 사용하는 것들로 진행할 것이다.\n입사하고 난 후 매일 하루 시작이 즐겁고 하루 종일 신나있는 것 같다. 아직 앞으로 마주할 많은 일들을 마주하지 못했기 때문이지 않을까..\n어찌 됐든 즐겁게 일할 수 있음에 감사하고 현재에 안주하지 말고 더욱 성장하고 싶다.\n"
},
{
  "permalink": "http://localhost:1313/post/2023-01-31-memoirs-of-january/",
  "title": "[2023] 1월 회고록",
  "tags": ["2023", "daily"],
  "description": "2023년 1월 회고록",
  "contents": "2023년도가 시작되고 벌써 1달이 지나버렸다. 6월이 와야 2살 어려질 텐데.. 언제 오니??\n새해에는 역시 새로운 마음가짐으로 다양한 목표들을 세우고 하나씩 실패하는 모습을 보는 재미가 있다. 올해는 좀 덜 실패하기 위해 다양한 시도들을 하고 있는데 참..\n아 눈오리 만들어 보려고 눈오리 집게를 샀는데 눈이 쌓여 있는 날이 없었다. 하루 정도 있었는데 눈이 무슨 설빙처럼 뭉쳐지지 않는 느낌?? 다음에는 물 들고나가서 불법 개조를 해보려 한다.\n새해가 밝았어, 연진아 뭔가 하고 싶다는 욕심은 많은 편이라 연말부터 새로운 계획을 세워가기 시작했다. 식상하게 일찍 일어나는 것부터 GitHub 활성화를 시켜보자는 생각도 하고 정말 많은 계획들이 있었지만, 올해 나의 목표는 \u0026lsquo;사소한 것 하나까지 기록하는 습관을 가지는 것\u0026lsquo;이다.\n포트폴리오나 이력서를 위해서라도 기록을 해야 하겠지만, 그냥 올해 어떻게 살았고 노력했는지 알고 싶다. 항상 무언가 열심히 한다고는 하지만 막상 아무것도 없는 것 같아 자존감이 떨어질 때가 많았기 때문에 \u0026lsquo;내가 이렇게 열심히 하고 있구나\u0026rsquo;라는 생각이 들면 조금 덜 지치지 않을까?? (물론 열심히만 해서는 소용이 없지만..)\n그래서 To-Do list를 쓰기로 했다. 다이어리에 수기로 작성해야 하나 했지만 요즘 괜찮은 앱이 많아서 그중 하나를 사용하기 시작했는데 나름 나쁘지 않은 것 같다. 사소한 일상적인 목표들도 있지만 내가 제일 중요하게 생각하는 것은 깃허브에 1일 1 커밋 하려고 하는 TIL과 알고리즘 총 2가지다.\n일명 \u0026lsquo;잔디 채우기\u0026rsquo;라고 많은 개발자나 취준생 분들이 하고 계신데 나도 슬쩍 참여해보려고 한다. (시작하기 전엔 몰랐어요.. GitHub가 이렇게 머리가 깨지는 줄\u0026hellip;)\n너도 열심히 살고 있더라 연진아?\n머나몸고 (머리가 나쁘면 몸이 고생한다는 뜻) 위에 1일 1커밋을 목표를 잡고 있다고 했는데 쉬운 일이 아니었다. 그냥 폴더를 만들고 관리하면 되는 줄 알았는데.. 다양한 시행착오를 통해 조금 친해지고 있는 것 같다.\n시작하고 2주 정도 지났을 때쯤, 폴더 이름을 변경하거나 폴더를 추가해야 하는 상황이 생겨서 아무 생각 없이 폴더를 추가하고 커밋을 했는데 오류가 발생했다. 우여곡절 폴더 추가까지는 성공했는데 뭔가 깔끔하지 않은 느낌이랄까??\n\u0026lsquo;폴더명/폴더명..\u0026lsquo;처럼 표시가 되어서 살짝 당황했다. (상위 폴더명만 나오면 안 되는 거니..)\n그리고 폴더 이름을 한글로 설정했다가 영어로 바꿔볼까 하는 생각이 들어서 도전해 봤다. (왜 그랬을까..)\n처음에는 폴더 이름만 사악 바뀔 줄 알았는데 폴더 내부에 파일들의 기존 커밋까지 다 최신화가 되어버렸다. 4주 동안 기록했던 게 다 사라지는 기분.. 너는 알까 연진아?\n그냥 눈 딱 감고 하나씩 다 바꿨다. 그러고는 이미 진행한 건 삭제하지 않을 거면 최대한 건드리면 안 된다라는 교훈을.. 얻었다. (구글링해서 알게 된 명령어를 사용하기엔 너무 겁이 났다..)\n내 꿈은 너야, 연진아 취준 기간이다 보니 다른 사람들 만나는 것도 피하게 되고 막상 책상에 앉아 있어도 불안함만 가득한 나날이 반복되는 것 같다. 딱히 누가 눈치 주거나 그런 건 아닌데 괜히 혼자 조급한??\n올해 꼭 취업을 해야 한다라는 부담스러운 생각 말고, 취업과 가까워질 수 있는 목표를 세워보려고 한다.\n백준 티어 골드 달성 알고리즘은 필수까지는 아니지만 중요하다. 한번 시작해 봤는데 재밌기도 하고 많이 어렵기도 하다. 어려운 내용을 고민하고 해결하는 그 쾌락을 좋아하는 나에게는 적합하다고 생각한다. SQLD 도전 이력서에 한 줄이라도 쓸 수 있는 몇 안 되는 자격증이다. DB 지식도 얻을 수 있고 추후에 취업하고 도움도 되는 부분이라 시간적 여유가 많을 때 도전하는 게 맞지 않나 싶다. 프로젝트 진행 혼자 해야 하나 어쩌나 걱정했는데 다행히 프론트엔드에 관심이 있는 분과 둘이서 사소하게 진행해 보려 한다. 둘 다 시작한 지 얼마 안 됐기 때문에 작은 기능 구현부터 시작해서 점차 완성된 하나의 웹 사이트를 만들어보고 싶다. 올해 아직 11개월 남았으니까 할 수 있겠지 연진아?\n마무리 작년은 나에게 하고 싶은 일과 꿈을 알게 된 소중한 해였다면, 올해는 그 2가지에 가까워지는 해로 만들고 싶다. 취업 관련 공고가 계속 올라와서 지원해 볼까 하고 사이트에 접속하면 현실을 깨닫게 되는 것 같다. 그럴수록 뭔가 더 자신을 채찍질하게 되기도 하고 어떤 부분이 필요하고 발전시켜야 하는지 배우기도 한다.\n자소서에 지원 동기 파트가 정말 쓰기 어려운 것 같다. 물론 그렇다고 다른 건 쉽다는 건 아니지만.. 글 솜씨가 이렇게 없나 싶기도 하고 독서의 필요성도 느낀다.\n친구들도 대부분 취준 시즌이라 비슷한 고민을 공유할 수 있는 것도 가장 큰 도움이 되는 것 같다. 다들 열심히 하니까 나도 따라서 조금이라도 더 앉아 있으려 하는 것 같고 자주 보지는 못하지만 멀리서 진심으로 성공하기를 응원해 주고 응원하는 사람들이 있다는 점에 힘이 된달까..?\n"
},
{
  "permalink": "http://localhost:1313/tags/daily/",
  "title": "Daily",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2022-12-31-memoirs-of-december/",
  "title": "[2022] 12월 회고록",
  "tags": ["2022", "daily"],
  "description": "2022년 12월 회고록",
  "contents": "벌써 올해의 마지막 날이라는 게 실감이 안 난다. 뭔가 바쁘게 살았던 것 같은데 막상 기억해보면 딱히 없는\u0026hellip; 살짝 공허한 느낌이다.\n매년 1월 1일이 되면 새해 첫 곡이라고 해서 우주소녀의 이루리를 틀어 놓고 막 소원을 빌었는데 이번에는 다른 걸 틀어볼까 한다. (어림없지 올해도 또루리..)\n내년 계획을 살짝 세워봤는데 거창한 목표보다는 조금의 여유가 있는 스케줄을 지향하려 한다. 건강도 좀 챙기고.. 그래도 6월에 2살 어려지니까 아직 괜찮을 수도..?\n아 저는 이런 사람입니다 이번 달은 포트폴리오와 자소서를 작성하느라 많은 시간을 보냈다. 깃허브 페이지를 사용해서 만들고 싶었지만 텅텅 빈 포트폴리오를 보며 이건 안 만드는 것만도 못하다는 생각이 들어서 노션을 사용하기로 했다. 다양한 템플릿들이 있었는데 다 비슷비슷해서 내 입맛대로 수정하면서 작성했다. (채워 넣을 내용이 많아지면 깃허브 페이지로 만들어보고 싶다.)\n당당하게 프로젝트라고 할 수 있는 결과물이 1개.. 아니 겨우 끼워 넣어서 2개 정도인데 음.. 6개월 동안 뭐 했나 싶다. 현재 내 상황으로는 프로젝트를 꾸준히 개발해서 포트폴리오를 채우고 실력을 성장시키는 게 우선인 것 같다.\n자기소개서는 질문들이 다 비슷한 것 같아서 기본 양식과 질문에 대해 작성해 놓고 지원한 곳에서 정한 질문에 따라 내용을 수정하려고 한다. 고3 때 써보고 오랜만에 작성하니까 주절주절 박찬호 버금가는 TMT가 되어버렸다. (제가 LA에 있을 땐 말이죠..)\n어디선가 포트폴리오와 이력서는 미리 써두면 그때그때 수정해야 한다는 말을 들어서 무작정 시작하게 되었는데 정말 잘한 것 같다. 시간에 쫓겨서 쓴다고 생각하면 벌써 아찔하다..\n매도 먼저 맞는 게 낫다고 지금 삽질하면서 수정해 나가면 나중에는 좀 봐줄 만하지 않을까 기대해 본다.\n취미 찾기를 가장한 놀고먹기 하루종일 컴퓨터 앞에 앉아 있다 보니 눈도 침침해지고 거북목도 씨게 와버렸다. 뭔가 건강한 취미 생활이 필요할 것 같은 생각이 들어서 이것저것 시도해 보았다. (근데 이제 컴퓨터에 앉아서 이것저것 시도하는 게 의미가 있나..)\n가장 먼저 눈에 들어온 건 게임이었다. 진짜 독이 든 성배 같은 느낌인데 하루에 2시간? 정도 자기 전에 한다면 어떨까라는 생각이 들어 바로 도전해 봤다.\n현재 거의 모든 게임이 겨울 방학 버닝 이벤트 기간이라 바로 접속했지만 직업 정하는데 3일 넘게 걸리는 걸 보고 현타가 왔다. (숙제하다 보면 3시간은 기본일 것 같은데..)\n그다음 생각한 건 독서였다. 어렸을 때부터 해리포터 및 유명한 소설들은 다 읽어본 경험이 있는 나로서 굉장히 흥미로운 선택이었다. (내 집 마련 후에 만화책이 가득한 공간 하나 만드는 게 로망이랄까..??)\n고등학생 때 사놓고 못 본 마블 코믹스 시리즈가 있어서 읽어봤는데 그냥 하루종일 보다가 더 이상 볼 책이 없어졌다. 장편 소설을 하나 사서 다시 도전해 봐야겠다. (글이 많으면 잠이 오는 병이 있긴 한데..)\n마무리 내년에는 취업이라는 목표에 두 단계 다가갔으면 좋겠다. (한 단계로는 부족하니까..)\n너무 조급하지 않고 여유를 가지면서 계획한 일 하고 싶은 일을 천천히 도전하고, 나가서 사람들 좀 만나면서 살아야겠다. 올해 있었던 크고 작은 일들이 행복했든 힘들었든 다 추억으로 간직하고 싶다.\n다 뼈가 되고 살이 되는 경험이었다고 생각하고, 실수하거나 부족한 점이 있었다면 반복하지 않고 보완해야 할 거 같다.\n"
},
{
  "permalink": "http://localhost:1313/tags/2022/",
  "title": "2022",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/tags/bootcamp/",
  "title": "Bootcamp",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/post/2022-11-17-good-bye-bootcamp/",
  "title": "갯바위... 부트캠프.. (Good Bye 라는 뜻)",
  "tags": ["2022", "bootcamp"],
  "description": "부트캠프를 6개월 동안 다닌 후기",
  "contents": "올해 5월부터 11월까지 6개월 정도의 부트 캠프를 다니고 수료했다. 코딩의 코자도 모르는 비전공자다 보니 많은 우여곡절이 있었는데, 나와 비슷한 생각을 하거나 상황인 사람들에게 내 경험을 말하고 싶었고 도움이 되지 않을까 해서 공유해 보려고 한다.\n부트캠프를 선택한 이유? 막상 공부를 시작하자니 어디서부터 어떻게 시작해야 할지몰랐다. 무작정 시작하기에 앞서서 인터넷 검색을 해봤는데 독학으로 공부하는 사람들만큼 부트 캠프에 다니는 사람들도 있어서 고민이 되었다. 개인마다 선호하는 공부 방법이 있지만 생각해 본 결과 2가지 이유로 부트 캠프를 다니게 되었다.\n원동력 나는 무언가에 관심이 생기면 자세하게 알아보고 구체적인 계획까지 세세하게 세우는 편이다. 그러나 시작과는 다르게 의지도 점점 약해지고 흥미가 빠르게 식어서 흐지부지되는 경우가 많았다. 같은 상황을 반복하고 싶지 않았고, 혼자보다는 누군가와 같이 공부를 하게 된다면 꾸준히 할 수 있지 않을까 하는 생각이 들어 부트 캠프를 다니게 되었다.\n매일 정해진 시간 동안 수업을 듣다 보니 반강제적이긴 해도 하루도 쉬지 않고 공부를 할 수 있었다. 혼자였다면 공부를 미루거나 1시간 넘게 쉬면서 책상에 앉아있는 시간이 별로 없었을 것 같은데 어떻게든 책상에 앉아있다 보니 뭐\u0026hellip; 좋았습니다~ 여러 사람들과 같이 공부를 하니까 남들에게 뒤처지고 싶지 않다는 생각도 들고 심리적으로 의지가 되었다.\n방향성 무작정 컴퓨터로 코드를 치는 게 재밌어서 공부를 시작했기 때문에 내가 구현하고 싶은 것이 무엇인지, 어떤 분야의 개발자가 되고 싶은지 대한 확고한 목표가 없었다. 그렇기 때문에 프로젝트라던가 현업에서 사용하는 기술들을 경험해 보면 조금이라도 구체적인 방향이 잡히지 않을까 기대했다.\n프로그래밍 언어는 다양하고 언어에 따라 사용되는 분야도 다르다. 물론 한 가지 프로그래밍 언어를 공부하면 다른 언어들을 배울 때 큰 어려움이 없다고 한다. 하지만 내가 가고 싶은 분야에서 사용하는 언어와 그에 따른 프레임워크도 생각해야 하기 때문에 어떤 언어를 주로 사용할지에 대한 고민이 많았다.\n프론트엔드에서 사용하는 HTML, CSS와 백엔드에서 사용하는 Java, Python을 어느 정도 이해하고 사용할 수 있는 정도로 배우기 때문에 어떤 언어가 나에게 맞는지 정하는 데 도움이 됐다. 아 머신러닝 딥러닝도 있었지만\u0026hellip;ㅎ\n여러 가지 언어들을 공부하고 사용하다 보니 다양한 분야에 대한 전반적인 지식을 쌓을 수 있었다.\n지극히 개인적인 후기 지난 6개월을 되돌아보자면 나는 대체적으로 만족한다. 물론 진행속도가 빠르기 때문에 나처럼 기초지식이 없는 사람은 수업을 따라가는 것도 벅차서 많이 힘들었다. (하루가 지날수록 이해한 내용과 이해할 내용의 격차가 커지는..)\n다른 사람들에 비해 실력적으로 부족하다 보니 여러 번의 팀플에서 뭘 해야 할지 몰라서 눈치만 보고 아무것도 못하는 나 자신에게 현타가 왔다. 하지만 코딩을 하는 것이 재밌었고, 백엔드 개발자와 머신러닝 엔지니어라는 꿈이 생기면서 재밌게 힘들었던 것 같다. (재밌게 힘들다\u0026hellip;?? 마치 피할 수 없어서 다 맞고 정신을 놔버린..)\n팀플을 하면서 다른 사람들과 협업하는 방법과 소통하고 배려하는 방법을 배울 수 있었고, 취업에 관련된 특강들도 나중을 생각하면 큰 도움이 될 것 같다.\n단순히 개발자라는 직업이 빠르게 취직할 수 있고 개발자들이 억대 연봉이 많다(?)라는 이유로만 생각해서 부트 캠프를 시작하고 공부를 한다면 중간에 포기했을 것 같다. 아직은 내가 하고 싶은 일에 도전하려는 낭만이 있달까..?? 그래도 시간을 돌릴 수 있으면 어느 정도 수준까지는 혼자 공부한 후에 도전해 볼 것 같다.\n아쉬운 점은 코로나와 반대하는 사람들로 인해 대면 수업은 하지 못한 게 제일 아쉬웠다. 같이 공부한 사람들의 이름만 알고 얼굴은 모르는\u0026hellip; 키다리 아저씨 느낌?? 프런트 엔드 + 백 엔드 + 머신러닝 이렇게 여러 가지 분야를 배우다 보니 각 분야에 대해 깊이 있게 배우지 못한 부분이 아쉬웠다.\n한 가지 분야를 제대로 공부할 수 있는 곳을 신청했으면 어땠을까 하는 생각..??\n마무리 수료하고 1주일 정도 번아웃은 아니고 살짝 연타가 와서 블로그에 글도 안 쓰고 아무것도 안 하고 그냥 놀기만 했다. 팀플을 하면서 인류애가 사라졌고, 6개월 동안 공부한 것에 비해 만족할 만한 성과가 없어서 그런 것 같다.\n지금부터는 나 혼자 부족한 부분을 보완하면서 취업을 준비해야 한다. 모든 면에서 부족하다고 생각하지만 가장 부족한 부분은 알고리즘이지 않을까 싶다. cs 지식이나 면접은 지원할 실력이 돼야 필요하니까..?\n사이드 프로젝트를 진행하면서 포트폴리오를 채워나갈 예정이다. 아 팀플 할 때 서버 배포를 해보지 못해서 따로 공부해서 도전해 봐야지.. 하하 하하\n내가 되고 싶은 개발자는 경험하지 않은 문제가 주어졌을 때 해결할 수 있는 사람이다. 시간에 쫓기지 말고 내가 하고 싶은 공부를 하면서 꿈꾸었던 일들을 현실로 실행시켜보고 싶다.\n"
},
{
  "permalink": "http://localhost:1313/post/2022-10-31-memoirs-of-octobor/",
  "title": "[2022] 10월 회고록",
  "tags": ["2022", "bootcamp"],
  "description": "2022년 10월 회고록",
  "contents": "10월은 내가 가장 좋아하는 달이다. 겨울을 좋아하긴 하지만 가을이 날씨도 시원시원~ 하고 내 \u0026lsquo;생일\u0026rsquo;도 껴있으니까ㅎㅎ\n이번 달은 거의 프로젝트에 전념했다. 프로젝트를 하면서 개인 공부도 같이 하려고 했는데 (되겠냐고) 예상치 못한 상황들이 생겨서.. 네 그렇게 됐습니다~\nOO이 하고 싶은 거 다 해~ 지난달 회고록을 작성했을 때, 프로젝트를 시작하기 전에 확실하게 진로를 잡아보자라고 다짐했는데 어느 정도 방향이 잡혔다. 결정하기까지 많은 고민과 우여곡절이 있었다.\n\u0026lsquo;답장너\u0026rsquo; 였지만 진로와 미래에 대한 생각이다 보니 확신이 필요했다. 그러던 와중 한 개발자 커뮤니티에 관련 글을 올렸는데 살짝 매콤한 불속성 댓글이 달렸다. 내가 쓴 글의 의도를 잘 모르는 건지 그냥 까내리고 기죽이려는 듯한 말이어서 그냥 무시했지만 보기보다 마음이 여린 편이라.. (알고 보니 모든 게시물에 시비 걸고 다니는 사람이더라.. 쩝)\n결론은 파이썬과 그 프레임 워크를 공부할 예정이다. 자바에 비해선 수요가 적지만 나의 최종 목표(머신러닝 엔지니어)를 위해선 파이썬 백엔드로 취업을 해야 하니까 파이썬을 사용하는 곳을 열심히 찾아보고 도전해 보자.\n피하지도 못하고 즐기지도 못해버린 팀플 주제를 정하고 문서 작성까지 완료를 했는데 예상치 못한 문제가 발생했다. 머신러닝에 학습할 데이터를 열람하지 못하는 상황이 생겨서 주제를 바꾸고 문서 작성도 다시 해야 했다. (진짜 주제 기가 막혔는데..)\n다들 프로젝트 기획서(워드, ppt)나 SRS 같은 문서 작성은 처음이다 보니 시간도 오래 걸리고 새로운 주제를 정할 때 의견이 좁혀지지 않았다. 우여곡절 끝에 문서작성 및 주제 선정이 마무리되어서 각자 맡은 부분을 개발하면 되는 아주 평화롭고 무난한 시간만 남았을 줄 알았는데\u0026hellip;\n프로젝트가 약 2주 밖에 남지 않은 시점에서(20% 정도 진행 상태) 팀원 한 분이 취업을 하셨다고 중도 하차를 통보하셨다. 진짜 그날은 하루 종일 멘붕상태였다. 프로젝트를 마무리하고 싶은데 둘이서 할 수 있을지에 대한 걱정이 제일 컸고 지난 6개월 동안 내가 무언가를 했다는 결과물을 남기고 싶었는데 다행히 다른 팀원분도 나랑 같은 생각이셨다. 약 1주일 정도 남은 현재 처음에 계획했던 2-3가지 기능에서 1가지라도 구현해 보자는 생각으로 진행이 되고 있다.\n마무리 회고록을 쓰기 전에 이번 달에 내가 무슨 일이 있었는지 곰곰이 생각해 봤다. 막상\u0026hellip; 프로젝트 말고는 뭔가 없는?? 취미도 없고 사람도 안 만나고 개인 공부에 찌들어져 있는 미친놈이었다.\n그렇다고 막 실력적으로 성장했다거나 불안감과 조급함이 줄어들지는 않는 느낌?? 하면 할수록 제자리걸음인 것 같아서 간절하긴 하지만 이렇게 열심히 달리는 게 맞나 싶기도 하다.\n나가서 사람들도 좀 만나고 취미를 만들어서 쉴 땐 쉬고 할 땐 하는 사람이 돼야겠다. 아 책 좀 읽자.\n"
},
{
  "permalink": "http://localhost:1313/post/2022-10-01-memoirs-of-september/",
  "title": "[2022] 9월 회고록",
  "tags": ["2022", "bootcamp"],
  "description": "2022년 9월 회고록",
  "contents": "3일 연휴라 잠깐 쉬어가는 타임으로 회고록을 써볼까 한다. 블로그를 시작할 때부터 쓸 생각이었는데 얼마나 자주 또는 어떤 내용을 써야 할지 고민이다..\n3개월이 적당하다고 생각하는데 1주일 전에 있던 일도 자주 까먹는 편이라 한 달에 한 번씩 쓰기로 했다. 아직 직접 개발을 하기보다는 이론 공부하는 수준이라 딱히 쓸 내용이 없지 않을까 싶기도 한데 뭐라도 쥐어짜면 나오겠지..\n인공지능(AI), 너.. 뭐 돼?? 5월부터 7월 초까지 자바와 스프링을 배우고 (일단 배운 것 같음) 1달 정도 파이썬 수업을 들었다. 이번 달부터 머신러닝과 딥러닝 수업을 나가기 시작했다. 자바를 배우다 파이썬을 공부하니까 비교적 쉽고 수업을 따라가는데 어렵지는 않았지만 머신러닝을 시작하고 나서는 머리가 깨지기 시작했다.\n수학을 좋아하는 편이다 보니 (특히 그래프에 환장함) 확률과 통계 느낌도 나서 재밌었지만 그 과정이 너무 복잡하고 어려웠다. 그러다가 MNIST 데이터 셋을 사용하여 학습시키고 예측하는 수업이 있었는데 손글씨로 쓴 숫자를 보고 어떤 숫자인지 예측하고 인식 정확도를 높이기 위해 입력값을 수정하는 시간이 너무 흥미로웠다.\n인공지능 수업을 시작하고 개발자로서의 방향을 잡기 위한 고민이 더 깊어졌다.\n팀플. 피할 수 없으면 즐기자 부트캠프 수료까지 1달 반 정도 남았는데 (왜 내 머릿속에는 아무것도 없을까) 남은 시간 동안 팀 프로젝트를 하게 되었다. 머신러닝, 딥러닝을 기반으로 웹 서비스를 만들어야 하는데 팀원 선정부터 쉽지 않았다. 사람들마다 생각하는 주제와 관심 분야가 다르다 보니 나와 생각이 비슷한 사람을 찾기가 어려웠다. (뭐.. 정해지긴 했는데 왜 저희 조만 팀원이 3명일까요??)\n조별 과제 특. 주제 정하는 게 제일 시간이 오래 걸림.\n이번 달은 개발 전 주제 선정 및 프로젝트에 필요한 문서를 작성하는 시간을 주로 가졌다. 백엔드 개발자가 목표라 백엔드 파트를 맡고 싶었지만 아쉽게도 다음 기회에\u0026hellip; 대신 인공지능 파트를 맡게 되었는데 기대 반 걱정 반이다.\n프로젝트 완성도 중요하지만 내가 맡은 역할을 이해하고 수행하는 것과 백엔드 파트도 맡고 있는 팀원한테 질문을 하면서 공부를 해보고 싶다.\n인생은 선택의 연속이다 단순히 백엔드 개발자라는 목표만 가지고 있다 보니 사용할 언어 및 프레임 워크를 시작으로 그 외에 배워야 할 지식들에 대해서는 미처 생각을 하지 못했다. (갈대 같은 사람\u0026hellip;)\n팀플 하는 동안에는 팀플을 제외하고 다른 공부를 신경 쓸 시간이 없을 것 같아서 확실하게 진로를 잡아보자라고 다짐했다. 구글링도 해보고 오픈채팅이나 커뮤니티에 질문도 하면서 많은 정보와 일침(?), 조언을 받았다.\n처음에 파이썬으로 생각을 했던 이유는 머신러닝 엔지니어에 관심이 생겼기 때문이다. 인공지능에서는 주로 파이썬을 사용한다 해서 백엔드 개발자로 취업을 한 후에 커리어 전환을 생각했을 때 파이썬이 더 좋지 않을까 하는 생각이었다.\n하지만 백엔드와 인공지능은 다른 분야라 커리어 전환보다는 한 가지를 정하고 공부를 하는 게 낫다는 얘기도 들었다. 현재 우리나라는 자바를 더 선호하는 회사들이 많고, 중 대형 프로젝트에도 자바를 주로 사용한다 해서 굉장히 고민이다. (게임 직업 고를 때보다 더 진지한..)\n마무리 9월에는 조금 평소와 달리 공부보다는 진로 쪽에 집중을 했다. 곧 6개월의 교육과정이 끝나면 혼자 계획을 세워서 취업 준비를 해야 한다는 생각에 마음이 조금 급한 것 같다. 지난 시간들 동안 뭐 했냐, 시간 아깝다고 생각할 수 있다.\n그 시간 동안 배운 내용들을 다 이해하고 학습하지는 못했더라도 개발에 대한 기초도 없는 상태에서 개발자라는 꿈이 생기고 구체적인 방향을 잡았다는 것에 만족한다. 단기간에 취업은 어렵겠지만 내가 하고 싶은 일에 도전을 하고 한 걸음씩 나아간다는 건 나름.. 낭만적이랄까??\n10월에는 프로젝트에 올인 할 생각이라 바쁘게 지나갈 것 같은데 많은 시행착오 속에서 많이 배우고 성장할 수 있기를 기대해 본다.\n자투리 시간에 책을 읽어볼까 하는데 개발 관련 책들은 다 헤비해서.. 추천받아요~\n"
},
{
  "permalink": "http://localhost:1313/post/2022-09-12-start-blog/",
  "title": "기술 블로그를 시작하면서",
  "tags": ["2022", "first"],
  "description": "기술 블로그를 시작하게 된 이유 및 계획 정리",
  "contents": "블로그 첫 포스팅은 개발 또는 코딩이라는 주제로 블로그를 시작한 이유, 방향성과 현재 나의 생각, 현실에 대해 적어보고자 한다.\n내가 블로그를 시작한 이유? 내가 블로그를 시작한 이유는 총 4가지이다.\n1. 공부 습관 코딩 공부를 시작하면서 나름 열심히 공부한다고 생각했는데 시간이 지나면 지날수록 내가 제대로 공부를 하고 있는지에 대한 의문이 생겼다. 한 번에 이해하기에는 무리가 있고 배운 코드들을 정확하게 이해하기 전에 새로운 코드들을 학습하다 보니 머릿속에 남는 게 없는 것 같았다.\n내가 배운 지식들을 포스팅하면서 더 자세히 알 수 있고, 잘못 알고 있거나 어려웠던 지식들을 고쳐나갈 수 있다고 생각한다. 또한 내가 올렸던 코드들을 다시 보고 공부할 일이 있을 것이라는 생각이 들어서 넓게 봤을 때 긍정적일 것 같다.\n2. 퍼스널 브랜딩(Personal Branding) 블로그를 쓰기 전에 다양한 개발자 분들의 기술 블로그를 보았다. 다양한 전문가들이 개발이라는 주제에 국한되지 않고 많은 지식을 공유하며 자신의 생각과 이야기를 쓰고 있었다. 그분들의 블로그를 보면서 가지고 있는 전문 지식을 알 수 있고 어떤 방식으로 성장했는지 포트폴리오처럼 자세히 알 수 있다.\n개발자가 되기 위해, 개발자로서 과거를 돌아볼 수 있는 좋은 방법인 것 같다. 내가 성장하는 과정을 자세히 기록할 수 있고, 다른 사람들에게 나의 생각과 전문성을 보여주면서 \u0026lsquo;나\u0026rsquo;라는 사람을 드러낼 수 있을 것이라고 생각한다.\n3. 동기부여 현재 나는 비전공자에 아무 기초지식도 없이 개발자가 되고 싶다는 꿈 하나만으로 공부를 하고 있다. 그러다 보니 초조하고 뭐라도 해야 할 것 같다는 압박을 느낄 때가 많다.\n그래서 무작정 공부만 하기보다 블로그를 시작하면 꾸준히 글을 쓰게 될 것이고 이것이 나에게 하나의 동기부여가 될 것 같다. (제목은 기술 블로그로 하겠습니다. 근데 이제 일기를 곁들인,,,,)\n4. 개발자 감성 개발자가 될 사람이라면 자고로 자신만의 블로그 하나쯤은 가지고 있어야 하지 않을까 해서\u0026hellip;??\nGitHub 블로그를 선택한 이유 어떤 플랫폼을 사용할까 고민을 하다가 GitHub로 블로그를 운영할 수 있다는 것을 알게 되었다. 개발자라면 GitHub는 필수기도 하고 Git과 GitHub에 대한 공부도 할 수 있지 않을까 하는 생각이 들었다. 블로그를 생성하던 중 submodule 에러 때문에 삽질을 좀 했지만 다행히 git submodule update \u0026ndash;init \u0026ndash;force 로 간단하게 에러를 해결했다. (물론 하루 종일 걸렸지만,,,, 좋았다면 오케입니다.)\n어떻게 블로그를 만들어 갈까? 무작정 '오늘부터 일단 게시물을 올릴 거야'가 아니라 주제를 정하고 방향성을 잡아야 꾸준하게 쓸 수 있다고 생각한다. 단순히 의무로 글을 올리는 것이 아닌 내가 쓰고 싶어서 올려진 게시물들로 이루어진 블로그를 만들고 싶다. 1. 배운 것 정리하기 공부를 하고 기억하기 제일 좋은 방법은 복습이라고 생각한다. 그러기 위해 공부한 내용을 간단하게라도 블로그에 정리할 생각이다. 보통 다른 블로그들에서 복사 붙여넣기하지 않을까 걱정되지만 짧더라도 내가 이해한 그대로 정리해 볼 생각이다.\n2. 목표를 세우고 공부하기 나는 백엔드 개발자를 목표로 공부를 하고 있다. 물론 프론트엔드에 대한 지식도 필요하고 앱이나 데이터 분석, 머신러닝 등 다양한 개발 분야가 있지만 한 단계씩 올라가려 한다.\n현재 국비지원 부트캠프를 다니고 있어서 짧은 시간 내에 배운 것들은 많지만 제대로 이해하고 있다고 생각하지 않는다. 그래서 유튜브나 구글링을 통해서 얻은 정보를 사용하여 나만의 로드맵을 만들었다. 이 로드맵을 바탕으로 체계적으로 공부를 하면서 글을 작성할 생각이다.\n3. 다양한 경험 해보기 간단한 협업 프로젝트를 진행한 적이 있었는데 처음이다 보니 배운 대로 하면 되겠지라고 생각했지만 전혀 달랐다. 이 경험을 통해 공부하고 이해하는 것만으로는 제대로 된 코드를 개발할 수 없다고 느꼈다.\n그래서 사이드 프로젝트를 해야 한다는 생각이 들었다. 사이드 프로젝트는 개인 혼자 또는 다른 사람들과 함께 진행할 수 있고, 폭넓게 쓰이고 있어서 자세히 알아보고 진행할 생각이다.\n마무리 매일매일 반복된 작은 노력이 모여 성공을 이룬다.\n한 3개월 정도 공부를 하면서 확신을 가지지 못하고 내가 잘할 수 있을까\u0026hellip; 라는 걱정이 있었다. 그 시간들은 내가 이 길을 가기 위한 맛보기라고 생각하고 다시 제대로 시작해볼 생각이다.\n블로그를 꾸준하게 운영하는 것도 중요하지만 지금 나에게 필요한 건 매일 공부하며 지식을 쌓는 것이라고 생각한다. 백엔드 개발자라는 목표가 세워진 만큼 그 목표를 향해 달려갈 생각이다. 그럼에도 내가 이 블로그를 하는 이유는 내가 하고 싶은 일을 찾은 만큼 최선을 다하고, 열정을 가지고 싶기 때문이다.\n또한 내가 다른 사람들의 블로그를 보면서 동기부여와 자극을 받은 것처럼 누군가 내 블로그를 보고 나와 같은 긍정적인 영향을 받았으면 좋겠다.\n"
},
{
  "permalink": "http://localhost:1313/archives/",
  "title": "",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/about/",
  "title": "",
  "tags": [],
  "description": "",
  "contents": "아직 준비중입니다..\n"
},
{
  "permalink": "http://localhost:1313/portfolio/",
  "title": "",
  "tags": [],
  "description": "",
  "contents": "아직 준비중입니다..\n"
},
{
  "permalink": "http://localhost:1313/search/",
  "title": "Search Result",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/series/",
  "title": "Series",
  "tags": [],
  "description": "",
  "contents": ""
},
{
  "permalink": "http://localhost:1313/tags/",
  "title": "Tags",
  "tags": [],
  "description": "",
  "contents": ""
}]
