<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2024 on DevHvun</title>
    <link>https://kmseunh.github.io/tags/2024/</link>
    <description>Recent content in 2024 on DevHvun</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>Copyright © 2023, Kim Seunghyun and the lee.so; all rights reserved.</copyright>
    <lastBuildDate>Tue, 15 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://kmseunh.github.io/tags/2024/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[Review] 나의 두 번째 프로젝트</title>
      <link>https://kmseunh.github.io/post/2024-10-15-second-project-review/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-10-15-second-project-review/</guid>
      <description>&lt;p&gt;3개월간 진행한 기업금융분석지원시스템(EFAS) 고도화 사업 프로젝트가 마무리되었다. &lt;br&gt;&#xA;이번 프로젝트는 기업 금융 통계 정보를 더욱 신뢰성 있고 효율적으로 제공하며, 사용자 편의성을 강화하는 것을 목표로 진행되었다.&lt;/p&gt;&#xA;&lt;p&gt;이번 글에서는 프로젝트를 돌아보며 경험과 배운 점을 정리하려 한다.&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/d75b8034-808a-4433-80ed-d46435cf7ec3&#34; width=&#34;450&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>서비스 간 결합도를 줄여보자</title>
      <link>https://kmseunh.github.io/post/2024-09-05-reduce-the-degree-of-inter-service-coupling/</link>
      <pubDate>Thu, 05 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-09-05-reduce-the-degree-of-inter-service-coupling/</guid>
      <description>&lt;p&gt;간단한 은행 입출금 프로젝트를 진행하면서 독립성과 협력의 개념에 대해 깊이 고민해 보았다. &lt;br&gt;&#xA;두 개념은 시스템 설계에서 각각 중요한 역할을 하지만, 때로는 서로 상충할 수도 있음을 알게 되었다.&lt;/p&gt;&#xA;&lt;p&gt;이번 포스팅에서는 이러한 개념들이 실제 코드 구현에 어떻게 영향을 미치는지 알아보려 한다.&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/b5429aaa-58d7-4538-9536-2ec53b71b81b&#34; width=&#34;450&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>CI/CD를 구축해보자</title>
      <link>https://kmseunh.github.io/post/2024-08-28-install-portainer-and-jenki/</link>
      <pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-08-28-install-portainer-and-jenki/</guid>
      <description>&lt;p&gt;서비스를 배포하려면 개발, 테스트, 빌드, 배포 등 여러 단계를 거쳐야 하며, 코드 변경 시마다 이 과정을 반복하는 것은 굉장히 번거롭다. &lt;br&gt;&#xA;CI/CD는 이러한 반복 과정을 자동화하여 애플리케이션을 빠르고 안정적으로 배포하며, 개발자가 빌드나 배포에 소요하는 시간을 줄여 개발에 더 집중할 수 있게 도와준다고 한다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;CI (Continuous Integration): 빌드, 테스트의 자동화&lt;/li&gt;&#xA;&lt;li&gt;CD (Continuous Delivery/Deployment): 배포의 자동화&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;다양한 CI/CD 도구 중에서 Jenkins와 GitHub Actions을 고민하고 있었다. &lt;br&gt;&#xA;고민하던 중 두 가지 도구를 함께 사용하는 방법이 효과적이라는 것을 알게 되었고, 이를 각각 CI와 CD에 활용해 보고 싶다는 생각이 들었다.&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Jenkins와 GitHub Actions을 각각 CI와 CD에 활용하면, Jenkins는 복잡한 빌드와 테스트 과정을 효과적으로 관리하고, GitHub Actions은 간편하게 배포를 자동화하여 전체 CI/CD 프로세스가 더 효율적이고 안정적으로 진행된다고 한다.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/8dccbcfb-8862-4110-9cfe-6401fc94fbeb&#34; width=&#34;450&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Portainer와 Jenkins를 설치해보자</title>
      <link>https://kmseunh.github.io/post/2024-08-26-install-portainer-and-jenkins/</link>
      <pubDate>Mon, 26 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-08-26-install-portainer-and-jenkins/</guid>
      <description>&lt;p&gt;웹 서버를 구축하고 4일 동안 정말 고통스러운 시간이었다. &lt;br&gt;&#xA;&lt;code&gt;Portainer&lt;/code&gt;와 &lt;code&gt;Jenkins&lt;/code&gt;을 설치하고 Https 프록시 설정을 하고 싶었는데 쉴 틈 없이 쏟아지는 에러들로 하염없이 시간을 보내버렸다. &lt;br&gt;&#xA;Portainer는 오래 걸리지 않았는데, Jenkins을 설치할 때 정말 많은 시간이 걸렸다.&lt;br&gt;&#xA;( 프로젝트 진행한 다음에 설치해도 되는데 왜 그랬을까&amp;hellip; )&lt;/p&gt;&#xA;&lt;p&gt;Portainer는 Docker 환경을 관리하기 위한 웹 기반 관리 도구로, Docker 컨테이너, 이미지, 볼륨 등을 직관적인 사용자 인터페이스를 통해 쉽게 관리할 수 있다. &lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;Jenkins는 CI/CD(지속적 통합 및 지속적 배포)를 자동화하는 도구로, 코드 변경 사항을 자동으로 빌드, 테스트, 배포하는 파이프라인을 구축할 수 있다.&lt;/p&gt;&#xA;&lt;p&gt;특히 Jenkins를 활용하여 개발 및 배포 프로세스를 자동화하고, GitHub와 연동하여 파이프라인을 구축해 보고 싶다.&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/e3d93ca0-9e74-429a-b368-47d5786069de&#34; width=&#34;450&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker에 Nginx 웹 서버를 구축해 보자</title>
      <link>https://kmseunh.github.io/post/2024-08-22-set-up-docker/</link>
      <pubDate>Thu, 22 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-08-22-set-up-docker/</guid>
      <description>&lt;p&gt;웹 서버(Web Server)는 웹 페이지와 애플리케이션을 인터넷이나 네트워크를 통해 사용자에게 제공한다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;클라이언트(일반적으로 웹 브라우저)로부터의 요청을 처리하고, 해당 요청에 맞는 데이터를 서버에서 찾아 응답으로 반환하는 역할을 한다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Nginx는 웹 서버 소프트웨어로, 웹 서버, 리버스 프록시, 로드 밸런서, 캐싱 등의 다양한 기능을 제공한다. &lt;br&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;웹 애플리케이션의 성능, 보안, 효율성을 크게 개선할 수 있다.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;도커(Docker)는 컨테이너화 기술을 기반으로 하는 오픈 소스 플랫폼이다. &lt;br&gt;&#xA;리눅스에서 애플리케이션을 실행할 수 있는 독립된 환경을 제공하는데 이때, 독립된 환경을 컨테이너라고 한다.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;컨테이너는 애플리케이션을 실행할 수 있는 환경&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;br&gt;&#xA;&lt;p&gt;원래는 서버 전역에 Nginx를 설치하여 사용하는 방법을 고려했지만, Docker를 활용하면 Nginx와 각 프로젝트의 환경을 완전히 분리할 수 있다. &lt;br&gt;&#xA;또한, Docker를 사용하면 각 프로젝트 내 애플리케이션을 독립적으로 관리할 수 있어, 유지보수 및 확장성 측면에서 이점이 있다. &lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;이러한 이유로 Docker를 사용해 보려고 한다.&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/344f7915-4cee-493c-b311-a8382fb18a3c&#34; width=&#34;400&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 세팅을 해보자</title>
      <link>https://kmseunh.github.io/post/2024-08-20-set-up-ubuntu/</link>
      <pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-08-20-set-up-ubuntu/</guid>
      <description>&lt;p&gt;나만의 서버가 생겼으니까 세팅을 해보려고 한다. &lt;br&gt;&#xA;세팅을 어렵지 않고 간단했지만 중간에 SSH 설정하면서 삽질을 좀 해가지고 시간이 오래걸렸다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>개인 서버가 있었으면 조켄네</title>
      <link>https://kmseunh.github.io/post/2024-08-18-creating-oracle-instances-and-server/</link>
      <pubDate>Sun, 18 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-08-18-creating-oracle-instances-and-server/</guid>
      <description>&lt;p&gt;내가 만든 서비스를 다른 사람들이 사용하는 모습을 상상하면서, 개인 서버를 구축하고 싶다는 마음이 들었다. &lt;br&gt;&#xA;처음에 떠오른 것은 AWS 프리티어였는데, 채용 공고에서 AWS 경험을 중요시하는 경우가 많아 필수로 경험해야겠다고 생각했다. &lt;br&gt;&#xA;하지만 이전에 프리티어 계정을 만들었던 경험이 있어, 몇 개월 후 예기치 않게 과금이 발생했던 기억이 있어서 조금 걱정이 되었다.&lt;/p&gt;&#xA;&lt;p&gt;그러던 중, 오라클 프리티어가 평생 무료로 서버를 제공한다는 매력적인 옵션을 발견했는데, 제한이 있긴 하지만 경제적인 부담 없이 개인 서버를 운영할 수 있다는 점에서 큰 매력을 느꼈다. &lt;br&gt;&#xA;그래서 바로 도전해 보기로 결심하고, 과정에서 겪은 여러 시행착오와 배운 점들을 기록하기로 했다.&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/f149f134-4264-4f11-80a3-4dd4329dca75&#34; width=&#34;400&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>전자정부 프레임워크? 이것 뭐에요~?</title>
      <link>https://kmseunh.github.io/post/2024-07-31-experience-the-egovframework/</link>
      <pubDate>Wed, 31 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-07-31-experience-the-egovframework/</guid>
      <description>&lt;p&gt;이번 달부터 새로운 프로젝트에 참여하게 되었다. &lt;br&gt; 프로젝트는 규모가 제법 크고, 팀원들도 많아서 내 역할이 아주 크지는 않지만, 처음부터 끝까지 모든 과정에 관여할 수 있는 기회를 얻게 되어 매우 기대되고 설레는 마음으로 참여하는 중이다. &lt;br&gt;&#xA;( Spring 프로젝트를 너무나도 경험해 보고 싶었다.. )&lt;/p&gt;&#xA;&lt;p&gt;특히 이번 프로젝트는 전자정부 프레임워크를 사용하고 있어서, 플러그인이나 외부 라이브러리 없이 순수 코딩으로 문제를 해결해야 했다. &lt;br&gt;&#xA;이 과정에서 내가 얼마나 플러그인이나 라이브러리에 의존해 왔는지를 깨닫게 되었고, 반성하게 되었다. &lt;br&gt;&#xA;처음에는 상당히 도전적으로 느껴져서 다소 불안하기도 했지만, 스스로의 개발 실력을 단련할 좋은 기회라는 생각이 들었다. &lt;br&gt;&#xA;( 뭔가 근본 넘치게 개발하는 느낌이랄까..?? )&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/424c199e-0028-4110-b199-21b644cf6c6e&#34; width=&#34;400&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>[Review] 나의 첫 번째 프로젝트</title>
      <link>https://kmseunh.github.io/post/2024-07-08-2023-07-18-first-project-review/</link>
      <pubDate>Mon, 08 Jul 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-07-08-2023-07-18-first-project-review/</guid>
      <description>&lt;p&gt;1년 2개월간 진행한 프로젝트가 드디어 마무리되었다. &lt;br&gt;&#xA;울산 공장의 모니터링 시스템을 운영 및 유지 보수하면서 동시에 청주 공장에서도 동일한 시스템 구축 프로젝트를 진행했다. &lt;br&gt;&#xA;때때로 두 공장에서 동시에 이슈가 발생하는 어려운 상황도 있었지만, 다행히 프로젝트를 성공적으로 완료하게 되어 기쁘다.&lt;/p&gt;&#xA;&lt;p&gt;이번 글에서는 프로젝트를 돌아보며 경험과 배운 점을 정리하려 한다.&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/2b780a23-8621-4cda-a57f-b55f0344d2b0&#34; width=&#34;450&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>좌충우돌 권한관리 기능 구현하기</title>
      <link>https://kmseunh.github.io/post/2024-06-24-implement-authorization-management-functions/</link>
      <pubDate>Mon, 24 Jun 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-06-24-implement-authorization-management-functions/</guid>
      <description>&lt;p&gt;매일 데이터 집계 로직을 작성하고 검증하는 작업을 주로 하던 중, 프로젝트에서 권한 관리 기능이 필요하게 되었다. &lt;br&gt;&#xA;권한 관리는 이전부터 구현해 보고 싶었던 기능 중 하나였고, 머릿속으로는 이미 구상이 다 되어 있어 자신만만하게 시작했지만, 역시나 쉽지 않았다. &lt;br&gt;&#xA;( 특히, 관리 측면에서 신경 써야 할 부분이 많았다. )&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/kmseunh/blog/assets/105186724/f6802f08-1949-4c7c-80c5-5fac10830551&#34; width=&#34;450&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>signed unsigned 데이터 타입</title>
      <link>https://kmseunh.github.io/post/2024-05-20-signed-unsigned-data-type/</link>
      <pubDate>Tue, 21 May 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-05-20-signed-unsigned-data-type/</guid>
      <description>&lt;p&gt;항상 출근하면 첫 번째로 하는 일은 대시보드 페이지에 접속해 어제와 현재의 각 공장별 데이터를 확인하여 이상이 없는지 점검하는 것이다.&lt;br&gt;&#xA;한동안 이상이 없었던 그래프가 지난주 금요일 데이터만 기하급수적으로 높게 치솟았고, SCADA에서 받아오는 데이터가 너무 높게 나오는 현상이 발생했다.&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/fecc2a85-8bc1-44de-b4f7-68601dc4ff8e&#34; width=&#34;450&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>역시 파일 전송은 SFTP</title>
      <link>https://kmseunh.github.io/post/2024-04-23-file-transfer-to-sftp/</link>
      <pubDate>Tue, 23 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-04-23-file-transfer-to-sftp/</guid>
      <description>&lt;p&gt;추가 개발을 위한 개발 환경을 구축하고 있었는데, 새로운 테이블이 필요해서 다른 서버의 테이블을 가져와야 하는 상황이 발생했다. &lt;br&gt;&#xA;전에는 Window로 파일을 보내 FileZilla(FTP 프로그램)를 사용하여 서버로 파일을 보냈었다. &lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;하지만 이번에는 SFTP 기능을 사용하여 Mac에서 바로 업로드를 시도했다. &lt;br&gt;&#xA;SSH(Secure Shell)의 확장인 SFTP를 사용하면 데이터 전송이 암호화되므로 보안적인 이점을 제공하며, 이를 통해 중간에서의 데이터 유출을 방지하고 안전하게 파일을 전송할 수 있다고 한다.&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/kmseunh/til/assets/105186724/a949cb2a-1872-420b-a8cd-016c1f61aef9&#34; width=&#34;450&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>김승현 세션 DB 사건</title>
      <link>https://kmseunh.github.io/post/2024-03-19-session-db-incident/</link>
      <pubDate>Tue, 19 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-03-19-session-db-incident/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;김승현이 SpringBoot로 작업하면서 로그인 시 세션을 생성할 때 DB에 저장해버린 사건을 말한다.&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;세션(Session)은 웹 애플리케이션에서 사용자의 상태를 유지하고 추적하는 데 중요한 역할을 한다. &lt;br&gt;&#xA;일반적으로 세션은 서버 측에서 관리되며, 클라이언트와 서버 간의 통신을 통해 식별된다고 한다.&lt;/p&gt;&#xA;&lt;p&gt;이러한 세션 기반 로그인 기능을 구현하는 중에 세션의 관리 및 수명에 대한 부분을 잘 이해하지 못해서 바보 같은 짓을 벌이고 말았다.&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/kmseunh/FastAPI/assets/105186724/d2724ff5-7b00-44d3-9239-299712ddfe04&#34; width=&#34;450&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>테이블구조를 안본건 너무 심했잖아..</title>
      <link>https://kmseunh.github.io/post/2024-02-18-need-to-understand-the-structure-of-database-tables/</link>
      <pubDate>Sun, 18 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-02-18-need-to-understand-the-structure-of-database-tables/</guid>
      <description>&lt;p&gt;기존에 진행한 프로젝트에 계정 관리 페이지를 만들어 달라는 요청이 있었다. &lt;br&gt;&#xA;이전에 비슷한 작업을 많이 해보았기 때문에 큰 어려움 없이 개발할 수 있을 거라고 생각했다. &lt;br&gt;&lt;/p&gt;&#xA;&lt;p&gt;하지만 로그에 에러가 계속 찍혀서 확인해 보니 회원가입 양식에 정보를 입력하고 제출하면, 해당 정보를 데이터베이스에 저장하는 과정에서 문제가 발생한 것이었다. &lt;br&gt;&#xA;(기존 로그들이 너무 많아서 정신 나가는 줄&amp;hellip;)&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/kmseunh/kmseunh/assets/105186724/44fdb377-9ae9-4ff9-91dd-ee4383eea7ae&#34; width=&#34;450&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>타임스탬프 우습게 보지마라</title>
      <link>https://kmseunh.github.io/post/2024-02-02-html-caching-timestamp-on-real-time-queries/</link>
      <pubDate>Fri, 02 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-02-02-html-caching-timestamp-on-real-time-queries/</guid>
      <description>&lt;p&gt;실시간으로 화면을 보여주는 기능을 구현해야 해서 개발을 하고 있었는데 브라우저를 리프레시만 하는 간단한 기능이라 크게 어려움은 없었다. &lt;br&gt;&#xA;그러나 살짝 쎄한 느낌이 들었는데, 아니나 다를까 실시간으로 업데이트된 내용이 화면에 보여져야 되는데 제대로 전달되지 않는 문제가 생긴 것이다.&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/48de88be-d328-4f65-afb3-88c6dddf94e3&#34; width=&#34;400&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>괜히 JavsScript로 화면 그린 그날</title>
      <link>https://kmseunh.github.io/post/2024-01-30-problems-when-drawing-a-screen-with-javascript/</link>
      <pubDate>Tue, 30 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-01-30-problems-when-drawing-a-screen-with-javascript/</guid>
      <description>&lt;p&gt;평소에는 HTML로 화면을 그리는 편인데, 오늘 처음으로 JavsScript로 도전하고 싶은 생각이 들었다. &lt;br&gt;&#xA;참지 못하고 저질러버렸는데&amp;hellip; div 태그로 각각 그리드 나누고 패딩 조절하는 것보다 훨씬 코드량도 적고 간단해서 좋았다. &lt;br&gt;&#xA;라고 생각한 지 10분도 안 돼서 문제가 생겼다..&lt;br&gt;&#xA;(코드가 짧고 단순하면 좋은 건 줄 알았지..)&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/29c789e2-1e01-4f9a-88e1-7026d18f2383&#34; width=&#34;400&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>기획하는 승현 감성 모르면 나가라</title>
      <link>https://kmseunh.github.io/post/2024-01-22-experience-project-planning/</link>
      <pubDate>Mon, 22 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-01-22-experience-project-planning/</guid>
      <description>&lt;p&gt;UI/UX기획은 소프트웨어 또는 웹 애플리케이션을 디자인할 때 매우 중요한 단계이다. &lt;br&gt;&#xA;그 동안 진행한 프로젝트는 내가 기획할 일이 없었기 때문에 별 생각이 없었지만, 이번에 간단한 프로젝트의 기획을 맡게 되어서 도전해보니 정말 난관이었다.&lt;br&gt;&#xA;(고려해야할 부분들이 너무 많잖아,,)&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/kmseunh/blog/assets/105186724/b3df82b6-6e17-4784-8a36-feea5a345448&#34; width=&#34;450&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>새해 에러 많이 받으세요(?)</title>
      <link>https://kmseunh.github.io/post/2024-01-02-date-issue-as-the-year-changes/</link>
      <pubDate>Tue, 02 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://kmseunh.github.io/post/2024-01-02-date-issue-as-the-year-changes/</guid>
      <description>&lt;p&gt;새해가 되면서 기존에 진행했던 프로젝트의 &lt;code&gt;Date&lt;/code&gt; 이슈가 우수수 쏟아졌다. &lt;br&gt;&#xA;현재 년도와 이전 년도의 데이터를 DB에서 &lt;code&gt;Date&lt;/code&gt; 기준으로 조회를 해서 가져와야하는데 그러지 못했다. &lt;br&gt;&#xA;&lt;code&gt;devtools&lt;/code&gt;에서 수많은 에러 로그들을 마주했을 때 기분이란 참.. 허허&lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/kmseunh/til/assets/105186724/1ee48d9f-997f-409c-8663-1f4740b26131&#34; width=&#34;450&#34;&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
